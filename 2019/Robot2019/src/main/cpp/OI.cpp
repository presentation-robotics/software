// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "frc/smartdashboard/SmartDashboard.h"
#include "Commands/AutoDriveDist.h"
#include "Commands/AutoDriveTurn.h"
#include "Commands/AutoPos1Level1Ship.h"
#include "Commands/AutoPos1Level2Ship.h"
#include "Commands/AutoPos2Level1Ship.h"
#include "Commands/AutoPos3Level1Ship.h"
#include "Commands/AutoPos3Level2Ship.h"
#include "Commands/AutoPosANYMove.h"
#include "Commands/AutoStop.h"
#include "Commands/DriveReset.h"
#include "Commands/DriveShift.h"
#include "Commands/DriveSpin.h"
#include "Commands/DriveTeleop.h"
#include "Commands/EBBump.h"
#include "Commands/EBCalibrate.h"
#include "Commands/EBRun.h"
#include "Commands/ELBump.h"
#include "Commands/ELCalibrate.h"
#include "Commands/ELRun.h"
#include "Commands/GPShift.h"
#include "Commands/INDelivery.h"
#include "Commands/INRun.h"
#include "Commands/LFBackDeploy.h"
#include "Commands/LFFrontDeploy.h"
#include "Commands/LFMotorRun.h"
#include "Commands/MoveCargoShipCargo.h"
#include "Commands/MoveGround.h"
#include "Commands/MoveLoadingStation.h"
#include "Commands/MoveRocketLevel1.h"
#include "Commands/MoveRocketLevel2.h"
#include "Commands/MoveRocketLevel3.h"
#include "Commands/MoveSmartDash.h"
#include "Commands/MoveStow.h"
#include "Commands/WRBump.h"
#include "Commands/WRCalibrate.h"
#include "Commands/WRRun.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    controlBoard.reset(new frc::Joystick(1));
    
    stow.reset(new frc::JoystickButton(controlBoard.get(), 16));
    stow->WhenPressed(new MoveStow());
    cargoShip.reset(new frc::JoystickButton(controlBoard.get(), 15));
    cargoShip->WhenPressed(new MoveCargoShipCargo());
    rocket2.reset(new frc::JoystickButton(controlBoard.get(), 13));
    rocket2->WhenPressed(new MoveRocketLevel2());
    rocket1.reset(new frc::JoystickButton(controlBoard.get(), 14));
    rocket1->WhenPressed(new MoveRocketLevel1());
    floor.reset(new frc::JoystickButton(controlBoard.get(), 10));
    floor->WhenPressed(new MoveGround());
    loadingStation.reset(new frc::JoystickButton(controlBoard.get(), 9));
    loadingStation->WhenPressed(new MoveLoadingStation());
    wristBumpDown.reset(new frc::JoystickButton(controlBoard.get(), 5));
    wristBumpDown->WhileHeld(new WRBump(false));
    wristBumpUp.reset(new frc::JoystickButton(controlBoard.get(), 4));
    wristBumpUp->WhileHeld(new WRBump(true));
    elbowBumpDown.reset(new frc::JoystickButton(controlBoard.get(), 7));
    elbowBumpDown->WhileHeld(new EBBump(false));
    elbowBumpUp.reset(new frc::JoystickButton(controlBoard.get(), 6));
    elbowBumpUp->WhileHeld(new EBBump(true));
    elevatorBumpDown.reset(new frc::JoystickButton(controlBoard.get(), 12));
    elevatorBumpDown->WhileHeld(new ELBump(false));
    elevatorBumpUp.reset(new frc::JoystickButton(controlBoard.get(), 8));
    elevatorBumpUp->WhileHeld(new ELBump(true));
    gPShifter.reset(new frc::JoystickButton(controlBoard.get(), 11));
    gPShifter->WhileHeld(new GPShift());
    intakePanelStop.reset(new frc::JoystickButton(controlBoard.get(), 3));
    intakePanelStop->WhenReleased(new INDelivery(false));
    intakePanelDeliver.reset(new frc::JoystickButton(controlBoard.get(), 3));
    intakePanelDeliver->WhenPressed(new INDelivery(true));
    intakeStop.reset(new frc::JoystickButton(controlBoard.get(), 2));
    intakeStop->WhenReleased(new INRun(0));
    intakeExpel.reset(new frc::JoystickButton(controlBoard.get(), 2));
    intakeExpel->WhenPressed(new INRun(-1));
    intakeHold.reset(new frc::JoystickButton(controlBoard.get(), 1));
    intakeHold->WhenReleased(new INRun(3));
    intakeAcquire.reset(new frc::JoystickButton(controlBoard.get(), 1));
    intakeAcquire->WhenPressed(new INRun(1));
    dStick.reset(new frc::Joystick(0));
    
    spinRight.reset(new frc::JoystickButton(dStick.get(), 4));
    spinRight->WhileHeld(new DriveSpin(true));
    spinLeft.reset(new frc::JoystickButton(dStick.get(), 2));
    spinLeft->WhileHeld(new DriveSpin(false));
    lifterBackMove.reset(new frc::JoystickButton(dStick.get(), 7));
    lifterBackMove->WhenPressed(new LFBackDeploy());
    lifterFrontMove.reset(new frc::JoystickButton(dStick.get(), 6));
    lifterFrontMove->WhenPressed(new LFFrontDeploy());
    shiftSpeed.reset(new frc::JoystickButton(dStick.get(), 1));
    shiftSpeed->WhileHeld(new DriveShift(false));

    // SmartDashboard Buttons
    frc::SmartDashboard::PutData("Move Cargo Ship Cargo", new MoveCargoShipCargo());
    frc::SmartDashboard::PutData("Move Ground", new MoveGround());
    frc::SmartDashboard::PutData("Move Stow", new MoveStow());
    frc::SmartDashboard::PutData("Move SmartDash", new MoveSmartDash());
    frc::SmartDashboard::PutData("Move Rocket Level 3", new MoveRocketLevel3());
    frc::SmartDashboard::PutData("Move Rocket Level 2", new MoveRocketLevel2());
    frc::SmartDashboard::PutData("Move Rocket Level 1", new MoveRocketLevel1());
    frc::SmartDashboard::PutData("Move Loading Station", new MoveLoadingStation());
    frc::SmartDashboard::PutData("WR Calibrate", new WRCalibrate());
    frc::SmartDashboard::PutData("WR Bump: UP", new WRBump(true));
    frc::SmartDashboard::PutData("WR Bump: DOWN", new WRBump(false));
    frc::SmartDashboard::PutData("WR Run: NOCHANGE_ANGLE", new WRRun(-1));
    frc::SmartDashboard::PutData("WR Run: GROUND_ANGLE", new WRRun(0));
    frc::SmartDashboard::PutData("WR Run: SHIP_ANGLE", new WRRun(1));
    frc::SmartDashboard::PutData("WR Run: ROCKET_L1_ANGLE", new WRRun(2));
    frc::SmartDashboard::PutData("WR Run: ROCKET_L2_ANGLE", new WRRun(3));
    frc::SmartDashboard::PutData("WR Run: ROCKET_L3_ANGLE", new WRRun(4));
    frc::SmartDashboard::PutData("WR Run: SMARTDASH_ANGLE", new WRRun(5));
    frc::SmartDashboard::PutData("WR Run: BUMP_ANGLE", new WRRun(6));
    frc::SmartDashboard::PutData("WR Run: STOW_ANGLE", new WRRun(7));
    frc::SmartDashboard::PutData("EB Calibrate", new EBCalibrate());
    frc::SmartDashboard::PutData("EB Bump: UP", new EBBump(true));
    frc::SmartDashboard::PutData("EB Bump: DOWN", new EBBump(false));
    frc::SmartDashboard::PutData("EB Run: NOCHANGE_ANGLE", new EBRun(-1));
    frc::SmartDashboard::PutData("EB Run: GROUND_ANGLE", new EBRun(0));
    frc::SmartDashboard::PutData("EB Run: SHIP_ANGLE", new EBRun(1));
    frc::SmartDashboard::PutData("EB Run: ROCKET_L1_ANGLE", new EBRun(2));
    frc::SmartDashboard::PutData("EB Run: ROCKET_L2_ANGLE", new EBRun(3));
    frc::SmartDashboard::PutData("EB Run: ROCKET_L3_ANGLE", new EBRun(4));
    frc::SmartDashboard::PutData("EB Run: SMARTDASH_ANGLE", new EBRun(5));
    frc::SmartDashboard::PutData("EB Run: BUMP_ANGLE", new EBRun(6));
    frc::SmartDashboard::PutData("EB Run: STOW_ANGLE", new EBRun(7));
    frc::SmartDashboard::PutData("EL Calibrate", new ELCalibrate());
    frc::SmartDashboard::PutData("EL Bump: UP", new ELBump(true));
    frc::SmartDashboard::PutData("EL Bump: DOWN", new ELBump(false));
    frc::SmartDashboard::PutData("EL Run: NOCHANGE_HEIGHT", new ELRun(-1));
    frc::SmartDashboard::PutData("EL Run: GROUND_HEIGHT", new ELRun(0));
    frc::SmartDashboard::PutData("EL Run: SHIP_HEIGHT", new ELRun(1));
    frc::SmartDashboard::PutData("EL Run: ROCKET_L1_HEIGHT", new ELRun(2));
    frc::SmartDashboard::PutData("EL Run: ROCKET_L2_HEIGHT", new ELRun(3));
    frc::SmartDashboard::PutData("EL Run: ROCKET_L3_HEIGHT", new ELRun(4));
    frc::SmartDashboard::PutData("EL Run: SMARTDASH_HEIGHT", new ELRun(5));
    frc::SmartDashboard::PutData("EL Run: BUMP_HEIGHT", new ELRun(6));
    frc::SmartDashboard::PutData("Drive Reset", new DriveReset());
    frc::SmartDashboard::PutData("Auto Pos 3 Level 2 Ship", new AutoPos3Level2Ship());
    frc::SmartDashboard::PutData("Auto Pos 1 Level 2 Ship", new AutoPos1Level2Ship());
    frc::SmartDashboard::PutData("Auto Pos 3 Level 1 Ship", new AutoPos3Level1Ship());
    frc::SmartDashboard::PutData("Auto Pos 2 Level 1 Ship", new AutoPos2Level1Ship());
    frc::SmartDashboard::PutData("Auto Pos 1 Level 1 Ship", new AutoPos1Level1Ship());
    frc::SmartDashboard::PutData("Auto Pos ANY Move", new AutoPosANYMove());
    frc::SmartDashboard::PutData("Auto Drive Turn: DEFAULT", new AutoDriveTurn(0));
    frc::SmartDashboard::PutData("Auto Drive Dist: DEFAULT", new AutoDriveDist(0));
    frc::SmartDashboard::PutData("Auto Stop", new AutoStop());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // Additional joystick if using separate joysticks
    frc2135::RobotConfig* config = frc2135::RobotConfig::GetInstance();
    config->GetValueAsBool("DT_SeparateJoysticks", m_separateJoysticks, false);
    if (m_separateJoysticks) {
        dStick2.reset(new frc::Joystick(2));
    }
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<frc::Joystick> OI::getDStick() {
   return dStick;
}

std::shared_ptr<frc::Joystick> OI::getControlBoard() {
   return controlBoard;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

// Returns null pointer or additional joystick if using separate joysticks
std::shared_ptr<frc::Joystick> OI::getDStick2() {
   return ( (m_separateJoysticks) ? dStick2 : nullptr);
}
