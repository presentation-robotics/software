// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

#include <frc/Commands/Scheduler.h>
#include <frc/SmartDashboard/SmartDashboard.h>

#include "Commands/DriveMMDistance.h"

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<Drivetrain> Robot::drivetrain;
std::shared_ptr<Elevator> Robot::elevator;
std::shared_ptr<Elbow> Robot::elbow;
std::shared_ptr<Wrist> Robot::wrist;
std::shared_ptr<Intake> Robot::intake;
std::shared_ptr<Lifter> Robot::lifter;
std::shared_ptr<Pneumatics> Robot::pneumatics;
std::shared_ptr<Power> Robot::power;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	std::string		nameStr;

	std::printf("2135: RobotInit\n");

	// Create RobotConfig object to load values from file before subsystems are built
    frc2135::RobotConfig* config = frc2135::RobotConfig::GetInstance();
    config->GetValueAsString("RB_Name", nameStr, "noname");
    std::printf("2135: Robot Name %s\n", nameStr.c_str());

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    drivetrain.reset(new Drivetrain());
    elevator.reset(new Elevator());
    elbow.reset(new Elbow());
    wrist.reset(new Wrist());
    intake.reset(new Intake());
    lifter.reset(new Lifter());
    pneumatics.reset(new Pneumatics());
    power.reset(new Power());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// Add commands to Autonomous Sendable Chooser
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

	chooser.AddOption("Auto Pos ANY Move", new AutoPosANYMove());
	chooser.AddOption("Auto Pos 1 Level 1 Ship", new AutoPos1Level1Ship());
	chooser.AddOption("Auto Pos 2 Level 1 Ship", new AutoPos2Level1Ship());
	chooser.AddOption("Auto Pos 3 Level 1 Ship", new AutoPos3Level1Ship());
	chooser.AddOption("Auto Pos 1 Level 2 Ship", new AutoPos1Level2Ship());
	chooser.AddOption("Auto Pos 3 Level 2 Ship", new AutoPos3Level2Ship());

	chooser.SetDefaultOption("Auto Stop", new AutoStop());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    // Camera - Logitech C920
//	cs::UsbCamera cam = CameraServer::GetInstance()->StartAutomaticCapture();
//
//	// Camera - Microsoft LifeCam
//	cs::UsbCamera	cam = CameraServer::GetInstance()->StartAutomaticCapture(0);
//
//	std::string		camName = cam.GetName();
//
//	double	startTime = frc::GetTime();
//	double	maxTime = 3.0;
//
//	while (!cam.IsConnected() && ((frc::GetTime() - startTime) < maxTime)) {
//		std::printf("2135: CAM Waiting for camera to connect %5.3f\n", frc::GetTime() - startTime);
//		std::this_thread::sleep_for(std::chrono::milliseconds(200));
// 	}
//
//	if (cam.IsConnected()) {
//		std::printf("2135: CAM Camera is CONNECTED\n");
//		std::printf("2135: CAM Camera Desc %s\n", cam.GetDescription().c_str());
//		std::printf("2135: CAM Camera Path %s\n", cam.GetPath().c_str());
//		cam.SetVideoMode(cs::VideoMode::kMJPEG, 640, 360, 15);
//		std::printf("2135: CAM Camera data rate %5.1f\n", cam.GetActualDataRate());
//		std::printf("2135: CAM Camera FPS       %5.1f\n", cam.GetActualFPS());
//	}
//	else {
//		std::printf("2135: ERROR: CAM Camera is NOT CONNECTED\n");
//		std::printf("2135: CAM Camera removal %s\n", cam.GetDescription().c_str());
//		// TODO: Remove camera to make console quieter when no camera is needed
////		CameraServer::GetInstance()->RemoveCamera(camName);
//	}

	FMSGameDataRead();

	frc::SmartDashboard::PutData("Auto Modes", &chooser);
}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){
	std::printf("2135: ***** Disabled Init *****\n");
}

void Robot::DisabledPeriodic() {
	frc::Scheduler::GetInstance()->Run();

	// If RoboRIO User button is pressed, dump all CAN faults
	// if (frc::RobotController::GetUserButton() && !m_faultsCleared) {
	// 	m_faultsCleared = true;
	// 	RobotFaultDump();
	// }
}

void Robot::AutonomousInit() {
	std::printf("2135: ***** Auton Init ***** - FMS Read Game Data\n");
	FMSGameDataRead();
	autonomousCommand = chooser.GetSelected();
	if (autonomousCommand != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	std::printf("2135: ***** Teleop Init *****\n");
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != nullptr)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

///////////////////////////////////////////////////////////////////////////////////////////////////

void Robot::FMSGameDataRead(void) {
	std::string gameData;		// Game specific data from driver station
	static std::string prevGameData = "";
	double 		secs;

	// Initializes the gameData that read switch and scale colors from the FMS
	gameData = frc::DriverStation::GetInstance().GetGameSpecificMessage();

	// See if the game specific data has changed
	if (gameData.compare(prevGameData) != 0) {
		secs = (double)frc::RobotController::GetFPGATime() / 1000000.0;

		std::printf("2135: FMS %5.3f Game data %s\n", secs, gameData.c_str());
		prevGameData = gameData;

		// Update dashboard only if data received
		if (!gameData.empty()) {
			// Process game data here
		}
		else {
			std::printf("2135: FMS %5.3f Game data EMPTY\n", secs);
		}
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////

//	Fault handling utilities

void Robot::RobotFaultDump(void) {
#if 0
	std::shared_ptr<frc::Compressor>				pcm;
	std::shared_ptr<frc::PowerDistributionPanel>	pdp;

	pcm = RobotMap::pneumaticsCompressor;
	pdp = RobotMap::powerPDP;

	//	Print out talon SRX faults and clear sticky ones
	std::printf("2135: %s --------------\n", "TALON SRX FAULTS");
	frc2135::TalonSRXUtils::TalonSRXFaultDump("drivetrainMotorL1", RobotMap::drivetrainMotorL1);
	frc2135::TalonSRXUtils::TalonSRXFaultDump("drivetrainMotorL2", RobotMap::drivetrainMotorL2);
	frc2135::TalonSRXUtils::TalonSRXFaultDump("drivetrainMotorR3", RobotMap::drivetrainMotorR3);
	frc2135::TalonSRXUtils::TalonSRXFaultDump("drivetrainMotorR4", RobotMap::drivetrainMotorR4);
	frc2135::TalonSRXUtils::TalonSRXFaultDump("elevatorMotorL7", RobotMap::elevatorMotorL7);
	frc2135::TalonSRXUtils::TalonSRXFaultDump("elevatorMotorR8", RobotMap::elevatorMotorR8);
	frc2135::TalonSRXUtils::TalonSRXFaultDump("gripperMotorL11", RobotMap::gripperMotorL11);
	frc2135::TalonSRXUtils::TalonSRXFaultDump("gripperMotorR12", RobotMap::gripperMotorR12);
	frc2135::TalonSRXUtils::TalonSRXFaultDump("wristMotorW14", RobotMap::wristMotorW14);

	// Print out PCM faults and clear sticky ones
	std::printf("2135: %s --------------\n", "PCM FAULTS");
	int		i;
	if (pcm->GetCompressorCurrentTooHighStickyFault())
		std::printf("\tCurrentTooHighFault\n");
	if (pcm->GetCompressorNotConnectedFault())
		std::printf("\tCompressorNotConnectedFault\n");
	if (pcm->GetCompressorShortedFault())
		std::printf("\tCompressorShortedFault\n");
	pcm->ClearAllPCMStickyFaults();

	// Print out PDP faults and clear sticky ones
	std::printf("2135: %s --------------\n", "PDP FAULTS");
	std::printf("2135: Temperature      %5.1f\n", pdp->GetTemperature());
	std::printf("2135: Input Voltage    %5.1f\n", pdp->GetVoltage());
	for (i = 0; i <= 15; i++)
		std::printf("2135: Chan %2d Current %5.1f\n", i, pdp->GetCurrent(i));
	std::printf("2135: Total Current    %5.1f\n", pdp->GetTotalCurrent());
	std::printf("2135: Total Power      %5.1f\n", pdp->GetTotalPower());
	std::printf("2135: Total Energy     %5.1f\n", pdp->GetTotalEnergy());
	pdp->ResetTotalEnergy();
	pdp->ClearStickyFaults();
#endif
}

// START_ROBOT_CLASS(Robot);

#ifndef RUNNING_FRC_TESTS
int main(int argc, char** argv) {
    return frc::StartRobot<Robot>();
}
#endif
