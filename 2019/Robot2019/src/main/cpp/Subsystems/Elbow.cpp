// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Elbow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Elbow::Elbow() : frc::Subsystem("Elbow") {
    std::printf("2135: EL Elbow Constructor\n");

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    motorEB10.reset(new WPI_TalonSRX(10));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    m_talonValidEB10 = frc2135::TalonSRXUtils::TalonSRXCheck(motorEB10, "EB", "EB10");

    // Retrieve elbow modified parameters from RobotConfig
    frc2135::RobotConfig* config = frc2135::RobotConfig::GetInstance();
    config->GetValueAsDouble("EB_PidKp", m_pidKp, 0.375);
    config->GetValueAsDouble("EB_PidMaxOut", m_pidMaxOut, 1.0);
    config->GetValueAsDouble("EB_CLRampRate", m_CLRampRate, 0.080);
    config->GetValueAsInt("EB_CLAllowedError", m_CLAllowedError, 0);
	config->GetValueAsDouble("EB_ToleranceDegrees", m_toleranceDegrees, 5.0);
    config->GetValueAsInt("EB_MaxCounts", m_elbowMaxCounts, 0);
    config->GetValueAsInt("EB_MinCounts", m_elbowMinCounts, -1800);
	config->GetValueAsDouble("EB_BumpAngle", m_bumpAngle, 10.0);
	config->GetValueAsDouble("EB_GroundAngle", m_groundAngle, 0.0);
	config->GetValueAsDouble("EB_StowedAngle", m_stowedAngle, 15.0);
	config->GetValueAsDouble("EB_DeliveryAngle", m_deliveryAngle, 45.0);
	// config->GetValueAsDouble("EB_ElbowFlat", m_flatAngle, 5.0);

     if (m_talonValidEB10) {
		// Set the motor direction for the elbow
	    // Set the control mode and target to initially disable any movement
	    // Set to brake mode (in comparison to coast)
	    // Configure the encoder
		motorEB10->SetInverted(false);
	    motorEB10->SetNeutralMode(NeutralMode::Brake);
	    motorEB10->Set(ControlMode::PercentOutput, 0.0);
		motorEB10->ConfigSelectedFeedbackSensor(FeedbackDevice::CTRE_MagEncoder_Absolute, m_pidIndex, m_timeout);
		motorEB10->SetSensorPhase(false);
		m_curDegrees = CountsToDegrees(motorEB10->GetSelectedSensorPosition(m_pidIndex)); //WRITE COUNTS TO DEGREES 

		// Set maximum power and ramp rate
		// Set maximum current draw allowed

	 	// Set proportional constant
		// Set closed loop error
		motorEB10->ConfigPeakOutputForward(m_pidMaxOut, m_timeout);
		motorEB10->ConfigPeakOutputReverse(-m_pidMaxOut, m_timeout);
		motorEB10->ConfigClosedloopRamp(m_CLRampRate, m_timeout);
		motorEB10->Config_kP(m_slotIndex, m_pidKp, m_timeout);
		motorEB10->ConfigAllowableClosedloopError(m_slotIndex, m_CLAllowedError, m_timeout);

		motorEB10->ConfigForwardSoftLimitThreshold(m_elbowMaxCounts, m_timeout);
		motorEB10->ConfigReverseSoftLimitThreshold(m_elbowMinCounts, m_timeout);
		motorEB10->ConfigForwardSoftLimitEnable(true, m_timeout);
		motorEB10->ConfigReverseSoftLimitEnable(true, m_timeout);

		motorEB10->ConfigPeakCurrentLimit(10.0, m_timeout);
		motorEB10->EnableCurrentLimit(true);

		// Enable elbow PID with existing sensor reading (no movement)
		motorEB10->Set(ControlMode::Position, (double)DegreesToCounts(m_curDegrees));
     }

    // Initialize Variables
    m_targetDegrees = m_curDegrees;
    m_targetCounts = DegreesToCounts(m_curDegrees);

    // Field for manually progamming elbow angle
	frc::SmartDashboard::PutNumber("EB Setpoint", m_curDegrees);

	frc::SmartDashboard::PutBoolean("EB Calibrated", false);

}

void Elbow::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Elbow::Periodic() {
    // Put code here to be run every loop
    int		curCounts = 0;
	double	outputEB10 = 0.0, currentEB10 = 0.0;

	if (m_talonValidEB10) {
		curCounts = motorEB10->GetSelectedSensorPosition(m_pidIndex);
		outputEB10 = motorEB10->GetMotorOutputVoltage();
		currentEB10 = motorEB10->GetOutputCurrent();
	}

	if (m_elbowDebug) {
		frc::SmartDashboard::PutNumber("EB Counts", curCounts);
		frc::SmartDashboard::PutNumber("EB Degrees", CountsToDegrees(curCounts));
		frc::SmartDashboard::PutNumber("EB_Output_EB10", outputEB10);
		frc::SmartDashboard::PutNumber("EB_Current_EB10", currentEB10);
	}
}

///////////////////////////////////////////////////////////////////////////////

// Put methods for controlling this subsystem
// here. Call these from Commands.

void Elbow::Initialize(void) {
	double	curCounts = 0.0;

	std::printf("2135: EB Elbow Init\n");
	// Set PID target to current encoder reading

	if (m_talonValidEB10)
		curCounts = motorEB10->GetSelectedSensorPosition(m_pidIndex);

	m_targetDegrees = CountsToDegrees(curCounts);
}

int Elbow::DegreesToCounts(double degrees) {
	int counts;

	// counts = -degrees * (counts / degree) * reduction
	counts = (int) round(-degrees * (COUNTS_PER_ROTATION / 360.0) * OUTPUT_SHAFT_REDUCTION);
	return counts;
}

double Elbow::CountsToDegrees(int counts) {
	double degrees;

	// degrees = -counts * (degrees / count) / reduction
	degrees = -(double)counts * (360.0 / COUNTS_PER_ROTATION) / OUTPUT_SHAFT_REDUCTION;
	return degrees;
}

double Elbow::GetCurrentDegrees() {
	int curCounts = 0;

	if (m_talonValidEB10)
		curCounts = motorEB10->GetSelectedSensorPosition(m_pidIndex);

	m_curDegrees = CountsToDegrees(curCounts);
	return m_curDegrees;
}

void Elbow::MoveToPosition(int level)
{
	int curCounts = 0;

	m_elbowLevel = level;

	// Validate and set the requested level to move
	switch (level) {
	case ELBOW_NOCHANGE:	// Do not change from current level!
		// m_targetDegrees = m_targetDegrees;
		break;
	case ELBOW_GROUND:
		m_targetDegrees = m_groundAngle;
	 	break;
	case ELBOW_STOWED:
		m_targetDegrees = m_stowedAngle;
		break;
	case ELBOW_DELIVER:
		m_targetDegrees = m_deliveryAngle;
	case ELBOW_SMARTDASH:
		m_targetDegrees = frc::SmartDashboard::GetNumber("EB Setpoint", 0.0);
		break;
	case BUMP_ANGLE:
		double bumpAngle;
		bumpAngle = (m_bumpDir) ? m_bumpAngle : -m_bumpAngle;
		m_targetDegrees += bumpAngle;
		break;
	default:
		std::printf("2135: EB invalid angle requested - %d\n", level);
		return;
	}

	// Constrain input request to a valid and safe range between full down and max height
	std::printf("2135: EB m_targetDegrees: %f, counts: %d\n",
			m_targetDegrees, DegreesToCounts(m_targetDegrees));

	if (m_targetDegrees > CountsToDegrees(m_elbowMinCounts)) {
		std::printf("2135: EB m_targetDegrees limited by m_elbowMinCounts %d\n", m_elbowMinCounts);
		m_targetDegrees = CountsToDegrees(m_elbowMinCounts);
	}
	if (m_targetDegrees < CountsToDegrees(m_elbowMaxCounts)) {
		std::printf("2135: EB m_targetDegrees limited by m_elbowMaxCounts %d\n", m_elbowMaxCounts);
		m_targetDegrees = CountsToDegrees(m_elbowMaxCounts);
	}

	m_targetCounts = DegreesToCounts(m_targetDegrees);

	if (m_talonValidEB10)
		curCounts = motorEB10->GetSelectedSensorPosition(m_pidIndex);
	m_curDegrees = CountsToDegrees(curCounts);

	//Start the safety timer.
	m_safetyTimeout = 1.5;
	m_safetyTimer.Reset();
	m_safetyTimer.Start();

	// Set the mode and target
	if (m_talonValidEB10)
		motorEB10->Set(ControlMode::Position, (double)m_targetCounts);

	std::printf("2135: EB Move degrees %f -> %f counts %d -> %d\n",
			m_curDegrees, m_targetDegrees, curCounts, m_targetCounts);
}

bool Elbow::MoveToPositionIsFinished(void) {
	bool pidFinished = false;
	int curCounts = 0;
	int closedLoopError = 0;
	double motorOutput = 0.0;
	double errorInDegrees = 0;

	// If a real move was requested, check for completion
	if (m_elbowLevel != ELBOW_NOCHANGE) {
		if (m_talonValidEB10) {
			curCounts = motorEB10->GetSelectedSensorPosition(m_pidIndex);
			motorOutput = motorEB10->GetMotorOutputPercent();
		}

		double secs = (double)frc::RobotController::GetFPGATime() / 1000000.0;

		closedLoopError = m_targetCounts - curCounts;
		errorInDegrees = CountsToDegrees(closedLoopError);

		// cts = Encoder Counts, CLE = Closed Loop Error, Out = Motor Output
		std::printf("2135: EB %5.3f cts %d, deg %4.1f, CLE %d, Out %4.2f\n", secs,
				curCounts, CountsToDegrees(curCounts), closedLoopError, motorOutput);

		// Check to see if the error is in an acceptable number of inches.
		if (fabs(errorInDegrees < m_toleranceDegrees)) {
			pidFinished = true;
			m_safetyTimer.Stop();
			std::printf("2135: EB Move Finished - Time %f\n", m_safetyTimer.Get());
		}

		// Check to see if the Safety Timer has timed out.
		if (m_safetyTimer.Get() >= m_safetyTimeout) {
			pidFinished = true;
			m_safetyTimer.Stop();
			std::printf("2135: EB Move Safety timer has timed out\n");
		}
	}

	return pidFinished;
}

void Elbow::BumpToPosition(bool direction) {
	m_bumpDir = direction;

	MoveToPosition(BUMP_ANGLE);
}

void Elbow::Calibrate() {

	if (m_talonValidEB10)
		motorEB10->SetSelectedSensorPosition(0, m_pidIndex, m_timeout);

	frc::SmartDashboard::PutBoolean("EB Calibrated", true);
}



