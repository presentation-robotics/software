// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef ELBOW_H
#define ELBOW_H
#include "frc/commands/Subsystem.h"
#include "frc/WPILib.h"
#include "ctre/Phoenix.h"

#include "frc2135/TalonSRXUtils.h"
#include "frc2135/RobotConfig.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class Elbow: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<WPI_TalonSRX> motorEB10;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Declare constants
	bool 			m_elbowDebug = true; 			// Debug flag to disable extra logging calls
	const int 		m_slotIndex = 0;				// Motor controller profile slot index
	const int 		m_pidIndex = 0; 				// PID Slot index for sensors
	const int 		m_timeout = 10;					// CAN timeout in msec to wait for response
	const double	OUTPUT_SHAFT_REDUCTION = ((double)22/(double)16);	// Sprocket reduction on output shaft 16T to 22T sprockets
	const double 	COUNTS_PER_ROTATION = (1024 * 4); 	// CPR is 1024 and multipled by 4 because it is a quadrature encoder
   
    bool			m_talonValidEB10;				// Health indicator for elbow Talon 12

	int				m_elbowLevel;					// Current elbow level (not degrees)
	double			m_targetDegrees;				// Target angle of degrees that are requested of the elbow
	int				m_targetCounts;					// Target encoder counts of angle that are requested of the elbow
	double			m_curDegrees;
	bool			m_bumpDir;						// State variable for bumping up or down

	frc::Timer		m_safetyTimer;					// Safety timer for use in Elbow
	double			m_safetyTimeout;				// Seconds that the timer ran before stopping

	bool			m_gamePiece;					// Indicates whether the game piece is cargo or hatch panel. True means cargo; false means hatch panel.

	// Configuration file parameters
	double 			m_pidMaxOut;					// Elbow maximum speed during movement
	double			m_pidKp;						// Elbow PID proportional constant
	double			m_CLRampRate;					// Elbow PID ramp rate
	int				m_CLAllowedError;				// Elbow PID allowable closed loop error
	double			m_toleranceDegrees;				// Elbow PID tolerance in degrees		
	int				m_elbowMaxCounts;				// Elbow maximum allowable counts
	int				m_elbowMinCounts;				// Elbow minimum allowable counts
	double			m_bumpAngle;					// Incremental angle when bumping the elbow up/down

	double			m_groundCargoAngle;				// Setpoint for floor level (full down)
	double			m_groundHatchAngle;				// Setpoint for floor level (full down)
	double 			m_deliveryCargoAngle; 			// Setpoint to deliver cargo
	double 			m_deliveryHatchAngle; 			// Setpoint to deliver hatch panels
	double 			m_stowedAngle; 					// Setpoint for full up

public:
	Elbow();
	void InitDefaultCommand() override;
	void Periodic() override;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	enum {											// Elbow subsystem movement states
		ELBOW_NOCHANGE = -1,						// No change in elbow angle--maintain current position
		ELBOW_GROUND = 0,							// Move to angle facing ground
		ELBOW_STOWED = 1,							// Move to stowed angle
		ELBOW_DELIVER = 2,							// Move to delivery angle
		ELBOW_SMARTDASH = 3,						// Move to an angle read from dashboard
		BUMP_ANGLE = 4								// Move by bumping angle up or down
	};

	void Initialize(void);

	int DegreesToCounts(double degrees);
	double CountsToDegrees(int counts);
	double GetCurrentDegrees();

	void MoveToPosition(int level);
	bool MoveToPositionIsFinished(void);
	void BumpToPosition(bool direction);

	void Calibrate();

	void SetGamePiece(bool setting);

};

#endif
