// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef LIFTER_H
#define LIFTER_H
#include "frc/commands/Subsystem.h"
#include "frc/WPILib.h"
#include "ctre/Phoenix.h"

#include "frc2135/TalonSRXUtils.h"
#include "frc2135/RobotConfig.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class Lifter: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<WPI_TalonSRX> motorLF16;
	std::shared_ptr<frc::DoubleSolenoid> front;
	std::shared_ptr<frc::DoubleSolenoid> back;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	 // Declare constants
	int 		m_lifterDebug = 0;		// Debug flag to disable extra logging calls
	const int 	m_timeout = 30; 		// CAN timeout in msec to wait for response

	// Declare module variables
	bool		m_talonValidLF16;		// Health indicator for lifter Talon 16

	double 		m_driveSpeed;
	
	bool		m_frontExtended;
	bool		m_backExtended;

public:
	Lifter();
	void InitDefaultCommand() override;
	void Periodic() override;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	enum {
		LIFTER_STOP = 0,
		LIFTER_FORWARD = 1,
		LIFTER_REVERSE = -1
	};

	void Initialize(void);
	void FaultDump(void);
	void SetLifterMotorSpeed(int direction);
	void SetFrontSolenoid(bool extended);
	void SetBackSolenoid(bool extended);
};

#endif
