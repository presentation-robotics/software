// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef DRIVETRAIN_H
#define DRIVETRAIN_H
#include "frc/commands/Subsystem.h"
#include "frc/WPILib.h"
#include "ctre/Phoenix.h"

#include "frc2135/TalonSRXUtils.h"
#include "frc2135/RobotConfig.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class Drivetrain: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<WPI_TalonSRX> motorL1;
	std::shared_ptr<WPI_TalonSRX> motorR3;
	std::shared_ptr<frc::DifferentialDrive> diffDrive;
	std::shared_ptr<WPI_TalonSRX> motorL2;
	std::shared_ptr<WPI_TalonSRX> motorR4;
	std::shared_ptr<frc::DoubleSolenoid> shifter;
	std::shared_ptr<frc::Encoder> driveEncoderL1;
	std::shared_ptr<frc::Encoder> driveEncoderR3;
	std::shared_ptr<PigeonIMU> pigeonIMU;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	//	Declare constants
	const int 		m_pidIndex = 0; 					// PID slot index for sensors
	const int 		m_timeout = 10; 					// CAN timeout in msec to wait for response

	//Declare module variables
	bool	m_talonValidL1;			// Health indicator for drive Talon Left 1
	bool	m_talonValidL2;			// Health indicator for drive Talon Left 2
	bool	m_talonValidR3;			// Health indicator for drive Talon Right 3
	bool	m_talonValidR4;			// Health indicator for drive Talon Right 4

	double	m_driveXScaling;		// Scaling applied to Joystick
	double	m_driveYScaling;		// Scaling applied to Joystick

	bool	m_lowGear;				// Low Gear or High Gear
	bool 	m_brakeMode;			// Brake or Coast Mode for Talons


public:
	Drivetrain();
	void InitDefaultCommand() override;
	void Periodic() override;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	void Initialize(void);
	void MoveWithJoystick(std::shared_ptr<frc::Joystick>, std::shared_ptr<frc::Joystick>);

	// Shifting Gears
    void MoveShiftGears(bool lowGear);
    //Brake or Coast Mode
    void MoveSetBrakeMode(bool m_brakeMode);
};

#endif
