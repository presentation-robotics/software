// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Logger.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Logger::Logger() : frc::Subsystem("Logger") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    talonSRX1.reset(new WPI_TalonSRX(0));
    
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Logger::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Logger::Periodic() {
    // Put code here to be run every loop

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Logger::SaveData(std::shared_ptr<frc::Joystick> joystick1) {
    static double axisHistory[8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
    static int axisPtr = 0;

    double axis = joystick1->GetY();

    for (int i = 0; i < 8; i++)
        if (axis == axisHistory[i])
            return;

    if (++axisPtr >= 8)
        axisPtr = 0;

    axisHistory[axisPtr] = axis;

    double axisSquared = (axis > 0) ? std::pow(axis, 2) : -std::pow(axis, 2);
    double axisCubed = std::pow(axis, 3);
    double a = 0.8;
    double axisEther = a * axisCubed + (1-a) * axis;

    std::printf("2135: raw %6.4f squared %6.4f cubed %6.4f ether %6.4f\n", 
        axis, axisSquared, axisCubed, axisEther);
}
