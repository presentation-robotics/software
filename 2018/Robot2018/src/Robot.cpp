// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


//#include <Commands/AutoDriveDist.h>
#include "Robot.h"

#include "frc2135/RobotConfig.h"
#include "frc2135/TalonSRXUtils.h"

frc::SendableChooser<frc::Command*>* Robot::chooser = nullptr;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<Drivetrain> Robot::drivetrain;
std::shared_ptr<Elevator> Robot::elevator;
std::shared_ptr<Gripper> Robot::gripper;
std::shared_ptr<Wrist> Robot::wrist;
std::shared_ptr<Pneumatics> Robot::pneumatics;
std::shared_ptr<Power> Robot::power;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	std::string		nameStr;

	RobotMap::init();
	std::printf("2135: RobotInit\n");

	// Create RobotConfig object to load values from file before subsystems are built
    frc2135::RobotConfig* config = frc2135::RobotConfig::GetInstance();
    config->GetValueAsString("RB_Name", nameStr, "noname");
    std::printf("2135: Robot Name %s\n", nameStr.c_str());

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    drivetrain.reset(new Drivetrain());
    elevator.reset(new Elevator());
    gripper.reset(new Gripper());
    wrist.reset(new Wrist());
    pneumatics.reset(new Pneumatics());
    power.reset(new Power());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// Add commands to Autonomous Sendable Chooser

	// TODO:  Commented out due to bug in SmartDashboard for long command names

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

//	chooser.AddObject("Auto Pos ANY Move", new AutoPosANYMove());
//	chooser.AddObject("Auto Pos 1", new AutoPos1());
//	chooser.AddObject("Auto Pos 2", new AutoPos2());
//	chooser.AddObject("Auto Pos 3", new AutoPos3());
//
//	chooser.AddDefault("Auto Stop", new AutoStop());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    // Camera - Logitech C920
//	cs::UsbCamera cam = CameraServer::GetInstance()->StartAutomaticCapture();

	// Camera - Microsoft LifeCam
	cs::UsbCamera	cam = CameraServer::GetInstance()->StartAutomaticCapture();

	std::string		camName = cam.GetName();

	if (cam.IsConnected()) {
		std::printf("2135: CAM Camera %s is CONNECTED\n", camName.c_str());
		std::printf("2135: CAM Camera Desc %s\n", cam.GetDescription().c_str());
		std::printf("2135: CAM Camera Path %s\n", cam.GetPath().c_str());
		cam.SetVideoMode(cs::VideoMode::kMJPEG, 640, 360, 15);
		std::printf("2135: CAM Camera data rate %5.1f\n", cam.GetActualDataRate());
		std::printf("2135: CAM Camera FPS       %5.1f\n", cam.GetActualFPS());
	}
	else {
		std::printf("2135: ERROR: CAM Camera %s is NOT CONNECTED\n", camName.c_str());
		CameraServer::GetInstance()->RemoveCamera(camName);
	}

	m_FMSAlliSwitch = SIDE_UNINIT;
	m_FMSScale = SIDE_UNINIT;
	m_FMSOppSwitch = SIDE_UNINIT;

	SmartDashboardStartChooser();
	FMSGameDataRead();

	frc::SmartDashboard::PutBoolean(ROBOT_ALLOW_SCALE, false);
}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){
	std::printf("2135: ***** Disabled Init *****\n");
	drivetrain->Initialize();
}

void Robot::DisabledPeriodic() {
	frc::Scheduler::GetInstance()->Run();

	// If RoboRIO User button is pressed, dump all CAN faults
	if (RobotController::GetUserButton() && !m_faultsCleared) {
		m_faultsCleared = true;
		RobotFaultDump();
	}
}

void Robot::AutonomousInit() {
	std::printf("2135: ***** Auton Init ***** - FMS Read Game Data\n");
	drivetrain->Initialize();
	elevator->Initialize();
	gripper->Initialize();
	wrist->Initialize();

	FMSGameDataRead();

	autonomousCommand = chooser->GetSelected();
	if (autonomousCommand != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	FMSGameDataRead();
	frc::Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	std::printf("2135: ***** Teleop Init *****\n");
	drivetrain->Initialize();
	elevator->Initialize();
	gripper->Initialize();
	wrist->Initialize();

	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != nullptr)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

///////////////////////////////////////////////////////////////////////////////////////////////////

void Robot::SmartDashboardStartChooser() {

	delete chooser;
	chooser = new frc::SendableChooser<frc::Command*>;
	// Keep names short due to bug in smartdashboard
	chooser->AddDefault("Auto Stop", new AutoStop());
	chooser->AddObject("Pos ANY Move", new AutoPosANYMove());
	chooser->AddObject("Pos 1", new AutoPos1());
	chooser->AddObject("Pos 2", new AutoPos2());
	chooser->AddObject("Pos 3", new AutoPos3());

	frc::SmartDashboard::PutData("Auto Modes", chooser);
}

///////////////////////////////////////////////////////////////////////////////////////////////////

// Evaluate game data string into an enum for internal use

Robot::fmsSide_t Robot::FMSGameDataSide(char c) {

	fmsSide_t	side;

	switch (c) {
	case 'L':
		side = SIDE_LEFT;
		break;
	case 'R':
		side = SIDE_RIGHT;
		break;
	default:
		side = SIDE_UNKNOWN;
	}
	return side;
}

// Return correct string for a specified enum

const char *Robot::FMSGameDataString(fmsSide_t side) {

	const char *str;

	switch (side) {
	case SIDE_LEFT:
		str = FMS_Left;
		break;
	case SIDE_RIGHT:
		str = FMS_Right;
		break;
	case SIDE_UNKNOWN:
		str = FMS_Unknown;
		break;
	default:
		str = FMS_Uninit;
	}
	return str;
}

void Robot::FMSGameDataRead(void) {
	std::string gameData;		// Game specific data from driver station
	fmsSide_t	fmsAlliSwitch = SIDE_UNINIT;
	fmsSide_t	fmsScale = SIDE_UNINIT;
	fmsSide_t	fmsOppSwitch = SIDE_UNINIT;
	double 		secs;

	secs = (double)RobotController::GetFPGATime() / 1000000.0;

	// Initializes the gameData that read switch and scale colors from the FMS
	gameData = frc::DriverStation::GetInstance().GetGameSpecificMessage();

	// Update dashboard only if data received
	if (!gameData.empty()) {
		std::printf("2135: FMS %5.3f Game data %s\n", secs, gameData.c_str());
		// Reads switch closest to Alliance Station
		fmsAlliSwitch = FMSGameDataSide(gameData[0]);

		// Reads scale
		fmsScale = FMSGameDataSide(gameData[1]);

		// Reads switch farthest from the Alliance Station
		fmsOppSwitch = FMSGameDataSide(gameData[2]);

		// If data has changed update smart dashboard and print to console
		if (m_FMSAlliSwitch != fmsAlliSwitch) {
			m_FMSAlliSwitch = fmsAlliSwitch;
			std::printf("2135: FMS %5.3f Alli Switch %s Side\n", secs, FMSGameDataString(m_FMSAlliSwitch));
			SmartDashboard::PutString(ROBOT_FMSALLISWITCH, FMSGameDataString(m_FMSAlliSwitch));
		}
		if (m_FMSScale != fmsScale) {
			m_FMSScale = fmsScale;
			std::printf("2135: FMS %5.3f Scale %s Side\n", secs, FMSGameDataString(m_FMSScale));
			SmartDashboard::PutString(ROBOT_FMSSCALE, FMSGameDataString(m_FMSScale));
		}
		if (m_FMSOppSwitch != fmsOppSwitch) {
			m_FMSOppSwitch = fmsOppSwitch;
			std::printf("2135: FMS %5.3f Opp Switch %s Side\n", secs, FMSGameDataString(m_FMSOppSwitch));
			SmartDashboard::PutString(ROBOT_FMSOPPSWITCH, FMSGameDataString(m_FMSOppSwitch));
		}
	}
	else {
		std::printf("2135: FMS %5.3f Game data EMPTY\n", secs);
		SmartDashboard::PutString(ROBOT_FMSALLISWITCH, FMSGameDataString(SIDE_UNINIT));
		SmartDashboard::PutString(ROBOT_FMSSCALE, FMSGameDataString(SIDE_UNINIT));
		SmartDashboard::PutString(ROBOT_FMSOPPSWITCH, FMSGameDataString(SIDE_UNINIT));
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////

//	Fault handling utilities

void Robot::RobotFaultDump(void) {
	std::shared_ptr<frc::Compressor>				pcm;
	std::shared_ptr<frc::PowerDistributionPanel>	pdp;

	pcm = RobotMap::pneumaticsCompressor;
	pdp = RobotMap::powerPDP;

	//	Print out talon SRX faults and clear sticky ones
	std::printf("2135: %s --------------\n", "TALON SRX FAULTS");
	frc2135::TalonSRXUtils::TalonSRXFaultDump("drivetrainMotorL1", RobotMap::drivetrainMotorL1);
	frc2135::TalonSRXUtils::TalonSRXFaultDump("drivetrainMotorL2", RobotMap::drivetrainMotorL2);
	frc2135::TalonSRXUtils::TalonSRXFaultDump("drivetrainMotorR3", RobotMap::drivetrainMotorR3);
	frc2135::TalonSRXUtils::TalonSRXFaultDump("drivetrainMotorR4", RobotMap::drivetrainMotorR4);
	frc2135::TalonSRXUtils::TalonSRXFaultDump("elevatorMotorL7", RobotMap::elevatorMotorL7);
	frc2135::TalonSRXUtils::TalonSRXFaultDump("elevatorMotorR8", RobotMap::elevatorMotorR8);
	frc2135::TalonSRXUtils::TalonSRXFaultDump("gripperMotorL11", RobotMap::gripperMotorL11);
	frc2135::TalonSRXUtils::TalonSRXFaultDump("gripperMotorR12", RobotMap::gripperMotorR12);
	frc2135::TalonSRXUtils::TalonSRXFaultDump("wristMotorW14", RobotMap::wristMotorW14);

	// Print out PCM faults and clear sticky ones
	std::printf("2135: %s --------------\n", "PCM FAULTS");
	int		i;
	if (pcm->GetCompressorCurrentTooHighStickyFault())
		std::printf("\tCurrentTooHighFault\n");
	if (pcm->GetCompressorNotConnectedFault())
		std::printf("\tCompressorNotConnectedFault\n");
	if (pcm->GetCompressorShortedFault())
		std::printf("\tCompressorShortedFault\n");
	pcm->ClearAllPCMStickyFaults();

	// Print out PDP faults and clear sticky ones
	std::printf("2135: %s --------------\n", "PDP FAULTS");
	std::printf("2135: Temperature      %5.1f\n", pdp->GetTemperature());
	std::printf("2135: Input Voltage    %5.1f\n", pdp->GetVoltage());
	for (i = 0; i <= 15; i++)
		std::printf("2135: Chan %2d Current %5.1f\n", i, pdp->GetCurrent(i));
	std::printf("2135: Total Current    %5.1f\n", pdp->GetTotalCurrent());
	std::printf("2135: Total Power      %5.1f\n", pdp->GetTotalPower());
	std::printf("2135: Total Energy     %5.1f\n", pdp->GetTotalEnergy());
	pdp->ResetTotalEnergy();
	pdp->ClearStickyFaults();
}

START_ROBOT_CLASS(Robot);

