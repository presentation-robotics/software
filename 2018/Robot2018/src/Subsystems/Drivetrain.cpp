// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ctre/Phoenix.h"

#include "../RobotConfig.h"
#include "Drivetrain.h"
#include "../RobotMap.h"
#include "../RobotDefaults.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/DriveTeleop.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Drivetrain::Drivetrain() : frc::Subsystem("Drivetrain") {
	std::printf("2135: Drivetrain Constructor\n");
#ifdef ROBOTNOTSTANDALONE
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    motorL1 = RobotMap::drivetrainMotorL1;
    motorR3 = RobotMap::drivetrainMotorR3;
    diffDrive = RobotMap::drivetrainDiffDrive;
    motorL2 = RobotMap::drivetrainMotorL2;
    motorR4 = RobotMap::drivetrainMotorR4;
    shifter = RobotMap::drivetrainShifter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    m_driveSpin = 0.0;

    //Invert the direction of the left hand side motors
    motorL1->SetInverted(false);
    motorL2->SetInverted(false);
    motorR3->SetInverted(false);
    motorR4->SetInverted(false);
    motorL1->Set(ControlMode::PercentOutput, 0.0);
    motorL2->Set(ControlMode::Follower, 1);
    motorR3->Set(ControlMode::PercentOutput, 0.0);
    motorR4->Set(ControlMode::Follower, 3);
    std::printf("2135: Motor L1 ID %d ver %d.%d\n", motorL1->GetDeviceID(), motorL1->GetFirmwareVersion()/256, motorL1->GetFirmwareVersion()%256);
    std::printf("2135: Motor L2 ID %d ver %d.%d\n", motorL2->GetDeviceID(), motorL2->GetFirmwareVersion()/256, motorL2->GetFirmwareVersion()%256);
    std::printf("2135: Motor R3 ID %d ver %d.%d\n", motorR3->GetDeviceID(), motorR3->GetFirmwareVersion()/256, motorR3->GetFirmwareVersion()%256);
    std::printf("2135: Motor R4 ID %d ver %d.%d\n", motorR4->GetDeviceID(), motorR4->GetFirmwareVersion()/256, motorR4->GetFirmwareVersion()%256);

    //Initialize drivetrain modifiers
    m_driveSpin = 0.5; 		//Initialize power setting used for spin turns

    RobotConfig* config = RobotConfig::GetInstance();
    config->GetValueAsDouble("Proportional", m_proportional, 0.75);

    //Adjust kP for encoder being used -- CPR of ___ is the reference
   	 motorL1->Config_kP(pidIndex, m_proportional, timeout);
   	 motorR3->Config_kP(pidIndex, m_proportional, timeout);

   	 double percentOutput = 1.0;
   	 config->GetValueAsDouble("Percent Output", percentOutput, 1.0);

   	 motorL1->ConfigPeakOutputForward(percentOutput, timeout);
   	 motorL1->ConfigPeakOutputReverse(-percentOutput, timeout);
   	 motorR3->ConfigPeakOutputForward(percentOutput, timeout);
   	 motorR3->ConfigPeakOutputReverse(-percentOutput, timeout);


#endif
}

void Drivetrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
#ifdef ROBOTNOTSTANDALONE
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new DriveTeleop());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
#endif
}

void Drivetrain::Periodic() {
    // Put code here to be run every loop

}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Drivetrain::MoveWithJoystick(std::shared_ptr<Joystick> joystick)
{
#ifdef ROBOTNOTSTANDALONE
	diffDrive->ArcadeDrive(-joystick->GetY(), joystick->GetX(), true);
#endif
}

//TODO: Replace numbers for DriveSpin with variables

void Drivetrain::MoveSpin(bool spinRight)
{
#ifdef ROBOTNOTSTANDALONE
	if(spinRight)
		diffDrive->TankDrive(0.5, 0.5, false);
	else
		diffDrive->TankDrive(-0.5, -0.5, false);
#endif
}

void Drivetrain::MoveShiftGears(bool lowGear)
{
#ifdef ROBOTNOTSTANDALONE
	if(lowGear) {
	    shifter->Set(shifter->kForward);
		m_lowGear = true;

	}

	else {
		shifter->Set(shifter->kReverse);
		m_lowGear = false;
	}
#endif
}

void Drivetrain::MoveDriveDistancePIDInit(double inches)
{
#ifdef ROBOTNOTSTANDALONE

	 m_pidTargetCounts = inches / InchesPerCount;
	 std::printf("2135: Encoder Distance Init %f counts, %f inches, %f InchesPerCount\n", m_pidTargetCounts, inches, InchesPerCount);

	 // Initialize the encoders to start movement at reference of zero counts
	 motorL1->SetSelectedSensorPosition(0, pidIndex, timeout);
	 motorR3->SetSelectedSensorPosition(0, pidIndex, timeout);

	 // Set the target distance in terms of wheel rotations
	 motorL1->Set(ControlMode::Position, m_pidTargetCounts);
	 motorR3->Set(ControlMode::Position, -m_pidTargetCounts); //CHECK if inverted or not

	 // Set flag to indicate that the PID closed loop error is not yet valid
	 m_CL_pidStarted = false;

	 // Start safety timer
	 m_safetyTimer.Reset();
	 m_safetyTimer.Start();
	 m_safetyTimer = 3.5; //CHECK if needs to be longer

	 // Disable safety feature during movement, since motors will be fed by loop
	 diffDrive->SetSafetyEnabled(false);

#endif
}

void Drivetrain::MoveDriveDistancePIDExecute()
{

}

bool Drivetrain::MoveDriveDistanceIsPIDAtSetpoint()
{
return false;
}

void Drivetrain::MoveDriveDistancePIDStop()
{

}
