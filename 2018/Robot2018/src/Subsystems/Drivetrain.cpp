// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ctre/Phoenix.h"

#include "../RobotConfig.h"
#include "Drivetrain.h"
#include "../RobotMap.h"
#include "../RobotDefaults.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/DriveTeleop.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Drivetrain::Drivetrain() : frc::Subsystem("Drivetrain") {
	std::printf("2135: Drivetrain Constructor\n");
#ifdef ROBOTNOTSTANDALONE
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    motorL1 = RobotMap::drivetrainMotorL1;
    motorR3 = RobotMap::drivetrainMotorR3;
    diffDrive = RobotMap::drivetrainDiffDrive;
    motorL2 = RobotMap::drivetrainMotorL2;
    motorR4 = RobotMap::drivetrainMotorR4;
    shifter = RobotMap::drivetrainShifter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    //Invert the direction of the left hand side motors
    motorL1->SetInverted(false);
    motorL2->SetInverted(false);
    motorR3->SetInverted(false);
    motorR4->SetInverted(false);
    motorL1->Set(ControlMode::PercentOutput, 0.0);
    motorL2->Set(ControlMode::Follower, 1);
    motorR3->Set(ControlMode::PercentOutput, 0.0);
    motorR4->Set(ControlMode::Follower, 3);
    std::printf("2135: Motor L1 ID %d ver %d.%d\n", motorL1->GetDeviceID(), motorL1->GetFirmwareVersion()/256, motorL1->GetFirmwareVersion()%256);
    std::printf("2135: Motor L2 ID %d ver %d.%d\n", motorL2->GetDeviceID(), motorL2->GetFirmwareVersion()/256, motorL2->GetFirmwareVersion()%256);
    std::printf("2135: Motor R3 ID %d ver %d.%d\n", motorR3->GetDeviceID(), motorR3->GetFirmwareVersion()/256, motorR3->GetFirmwareVersion()%256);
    std::printf("2135: Motor R4 ID %d ver %d.%d\n", motorR4->GetDeviceID(), motorR4->GetFirmwareVersion()/256, motorR4->GetFirmwareVersion()%256);

    //Retrieve drivetrain modifiers from RobotConfig
    RobotConfig* config = RobotConfig::GetInstance();
    config->GetValueAsDouble("DT_Proportional", m_proportional, 0.75);
    config->GetValueAsDouble("DT_AutonTurnKP", m_turnKP, 0.08);
    config->GetValueAsDouble("DT_TurnScaling", m_turnScaling, 1.0);
		if ((m_turnScaling < 0.0) || (m_turnScaling > 1.0)) {
				std::printf("2135: ERROR - m_turnScaling preference invalid - %f [0.0 .. 1.0]\n", m_turnScaling);
		}
    config->GetValueAsDouble("DT_DriveScaling", m_driveScaling, 1.0);
    config->GetValueAsDouble("DT_DriveSpin", m_driveSpin, 0.45);

    m_lowGear = true;
    MoveShiftGears(m_lowGear);

     //Adjust kP for encoder being used -- CPR of ___ is the reference
   	 motorL1->Config_kP(pidIndex, m_proportional, timeout);
   	 motorR3->Config_kP(pidIndex, m_proportional, timeout);

   	 double percentOutput = 1.0;
   	 config->GetValueAsDouble("DT_PercentOutput", percentOutput, 1.0);

   	 motorL1->ConfigPeakOutputForward(percentOutput, timeout);
   	 motorL1->ConfigPeakOutputReverse(-percentOutput, timeout);
   	 motorR3->ConfigPeakOutputForward(percentOutput, timeout);
   	 motorR3->ConfigPeakOutputReverse(-percentOutput, timeout);

   	 //Allowed Closed Loop Eroor - in Talon native units
   	 config->GetValueAsInt("DT_AllowedCLError", m_CL_allowError, 36);
   	 m_CL_allowError *= USDigitalS4_CPR / 120.0;


#endif
 	gyro = new AHRS(SPI::Port::kMXP);
 	LiveWindow::GetInstance()->AddSensor("IMU", "Gyro", gyro);

   	// Callibrate the gyro
   	std::printf("2135: Gyro Callibration Initialized\n");
   	gyro->Reset();
   	gyro->ZeroYaw();
   	std::printf("2135: Gyro Callibration Finished\n");


}

void Drivetrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
#ifdef ROBOTNOTSTANDALONE
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new DriveTeleop());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

#endif
}

void Drivetrain::Initialize(frc::Preferences *RobotConfig) {
	std::printf("2135: Drivetrain Initialize\n");

	//Robot switches from low gear in auton to high gear in teleop
	if (frc::RobotState::IsAutonomous()) {
		m_lowGear = true;
		m_brakeMode = true;
	}
	else {
		m_lowGear = false;
		m_brakeMode = false;
	}

    //Set all motors to use coast mode and low gear when initialized.
	MoveShiftGears(m_lowGear);
    m_brakeMode = false;
    MoveSetBrakeMode(m_brakeMode);

}

void Drivetrain::Periodic() {
    // Put code here to be run every loop

}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Drivetrain::MoveWithJoystick(std::shared_ptr<Joystick> joystick)
{
#ifdef ROBOTNOTSTANDALONE
	double xValue;
	double yValue;

	xValue = joystick->GetX();
	yValue = joystick->GetY();

	if (!m_lowGear) {
		xValue = xValue * m_driveScaling;
		yValue = yValue * m_driveScaling;
	}

	diffDrive->ArcadeDrive(-yValue, xValue, true);
#endif
}

void Drivetrain::MoveSpin(bool spinRight)
{
#ifdef ROBOTNOTSTANDALONE
	if(spinRight)
		diffDrive->TankDrive(m_driveSpin, m_driveSpin, false);
	else
		diffDrive->TankDrive(-m_driveSpin, -m_driveSpin, false);
#endif
}

void Drivetrain::MoveSetBrakeMode(bool brakeMode)
{
	NeutralMode brakeOutput;
	m_brakeMode = brakeMode;
	brakeOutput = (brakeMode) ? NeutralMode::Brake : NeutralMode::Coast;
	motorL1->SetNeutralMode(brakeOutput);
	motorL2->SetNeutralMode(brakeOutput);
	motorR3->SetNeutralMode(brakeOutput);
	motorR4->SetNeutralMode(brakeOutput);
}

void Drivetrain::MoveShiftGears(bool lowGear)
{
#ifdef ROBOTNOTSTANDALONE
	if(lowGear) {
	    shifter->Set(shifter->kForward);
		m_lowGear = true;
	}

	else {
		shifter->Set(shifter->kReverse);
		m_lowGear = false;
	}
#endif
}

void Drivetrain::MoveDriveDistancePIDInit(double inches)
{
#ifdef ROBOTNOTSTANDALONE

	 m_pidTargetCounts = inches / InchesPerCount;
	 std::printf("2135: Encoder Distance Init %f counts, %f inches, %f InchesPerCount\n", m_pidTargetCounts, inches, InchesPerCount);

	 // Initialize the encoders to start movement at reference of zero counts
	 motorL1->SetSelectedSensorPosition(0, pidIndex, timeout);
	 motorR3->SetSelectedSensorPosition(0, pidIndex, timeout);

	 // Set the target distance in terms of wheel rotations
	 motorL1->Set(ControlMode::Position, m_pidTargetCounts);
	 motorR3->Set(ControlMode::Position, -m_pidTargetCounts); //TODO check if inverted or not

	 // Set flag to indicate that the PID closed loop error is not yet valid
	 m_CL_pidStarted = false;

	 // Start safety timer
	 m_safetyTimer.Reset();
	 m_safetyTimer.Start();
	 m_safetyTimeout = 3.5; //TODO check if needs to be longer and if this needs to loaded from RobotConfig

	 // Disable safety feature during movement, since motors will be fed by loop
	 diffDrive->SetSafetyEnabled(false);

#endif
}

void Drivetrain::MoveDriveDistancePIDExecute()
{
	// No work needed since Talon does it naturally
}

bool Drivetrain::MoveDriveDistanceIsPIDAtSetpoint()
{
#ifdef ROBOTNOTSTANDALONE

	bool pidFinished = false;
	int closedLoopErrorLeft = 0, closedLoopErrorRight = 0;

	closedLoopErrorLeft = motorL1->GetClosedLoopError(pidIndex);
	closedLoopErrorRight = motorR3->GetClosedLoopError(pidIndex);

	if (!m_CL_pidStarted && (abs(closedLoopErrorLeft) > Encoder_CPR) &&
				(abs(closedLoopErrorRight) > Encoder_CPR))
		{
			m_CL_pidStarted = true;
			std::printf("2135: Closed loop error has changed\n");
		}
	if (m_CL_pidStarted) {
		if ((abs(closedLoopErrorLeft) <= m_CL_allowError) &&
				(abs(closedLoopErrorRight) <= m_CL_allowError))
			{
				std::printf("2135: ClosedLoopError:     L: %d  R: %d\n",
					closedLoopErrorLeft, closedLoopErrorRight);
				pidFinished = true;
			}
	}

	// Check if safety timer has expired
	if (m_safetyTimer.HasPeriodPassed(m_safetyTimeout)) {
		std::printf("2135: Safety Timer timed out %3.2f\n", m_safetyTimeout);
		pidFinished = true;
	}

	// If on target or safety time has expired
	return pidFinished;

#endif

	return true;
}

// MoveDriveDistancePIDStop is called to clean up after the PID loop reaches the target position

void Drivetrain::MoveDriveDistancePIDStop(void)
{
#ifdef ROBOTNOTSTANDALONE

	// Stop the safety timer
	std::printf("2135: TimeToTarget:  %3.2f\n", m_safetyTimer.Get());
	m_safetyTimer.Stop();

	SmartDashboard::PutNumber("DD PID L", GetEncoderPosition(motorL1));
	SmartDashboard::PutNumber("DD PID R", GetEncoderPosition(motorR3));
	SmartDashboard::PutNumber("DD TIME", m_safetyTimer.Get());

	// Change from PID position-loop back to PercentVbus for driver control
	motorL1->Set(ControlMode::PercentOutput, 0.0);
	motorR3->Set(ControlMode::PercentOutput, 0.0);

	// Do not shift back to high gear in case another auton command is running

	std::printf("2135: TargetCounts: %3.2f   L: %5d  R: %5d\n",
		m_pidTargetCounts, GetEncoderPosition(motorL1), GetEncoderPosition(motorR3));

	// Re-enable the motor safety helper (temporarily disabled)
	//drive->SetSafetyEnabled(false); //commented out in case there is another auton command is running before teleop

#endif
}

void Drivetrain::MoveDriveTurnPIDInit(double angle) {
	std::printf("2135: Going to zero encoder\n");
	gyro->ZeroYaw();
	std::printf("2135: Zero the Encoder\n");

}

void Drivetrain::MoveDriveTurnPIDExecute(void) {
	double gyroAngle = gyro->GetAngle();

	std::printf("2135: Gyro Angle %f\n", gyroAngle);
}

bool Drivetrain::MoveDriveTurnIsPIDAtSetPoint(void) {
	return false; // TODO: This is just for now to get no warnings
}

void Drivetrain::MoveDriveTurnPIDStop(void){
	//gyro->ZeroYaw();
}


int Drivetrain::GetEncoderPosition(std::shared_ptr<WPI_TalonSRX> mtr)
{
	return mtr->GetSelectedSensorPosition(pidIndex);
}
