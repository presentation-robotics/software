// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef GRIPPER_H
#define GRIPPER_H
#include "Commands/Subsystem.h"
#include "WPILib.h"
#include "../RobotDefaults.h"
#include "../FRC2135/RobotConfig.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class Gripper: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
#ifndef ROBORIO_STANDALONE
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<WPI_TalonSRX> motorL11;
	std::shared_ptr<WPI_TalonSRX> motorR12;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
#endif
	const int	m_timeout = 10;					// CAN timeout in msec to wait for response
	double 		m_gripperSpeed;


public:
	Gripper();
	void InitDefaultCommand() override;
	void Periodic() override;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// Gripper motor control states
	enum {
		GRIPPER_STOP = 0,
		GRIPPER_FORWARD = 1,
		GRIPPER_REVERSE = -1,
		GRIPPER_SPIN = 2
	};

	void Initialize(void);
	void SetGripperMotorSpeed(int speed);
};

#endif
