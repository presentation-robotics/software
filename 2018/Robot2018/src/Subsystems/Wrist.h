// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef WRIST_H
#define WRIST_H
#include "Commands/Subsystem.h"
#include "WPILib.h"
#include "../RobotDefaults.h"
#include "../frc2135/RobotConfig.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class Wrist: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
#ifndef ROBORIO_STANDALONE
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<WPI_TalonSRX> motorW14;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
#endif
	double m_wristSpeed;

	const int pidIndex = 0; 						// PID Slot index for sensors
	const int timeout = 10;							// CAN timeout in msec to wait for response
	const double COUNTS_PER_ROTATION = (1024 * 4); 	// CPR is 1024 and multipled by 4 because it is a quadrature encoder

	bool m_pidStarted;								// Indicates that PID started and Closed Loop is valid

public:
	Wrist();
	void InitDefaultCommand() override;
	void Initialize(frc::Preferences *RobotConfig);
	void Periodic() override;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	void SetWristMotorSpeed(int speed);

	void WristPIDInit(double angle);
	void WristPIDExecute(void);
	bool WristPIDIsAtSetpoint(void);
	void WristPIDStop(void);

};

#endif
