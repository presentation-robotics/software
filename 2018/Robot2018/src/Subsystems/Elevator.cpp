// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ctre/Phoenix.h"


#include "Elevator.h"
#include "../RobotMap.h"
#include "../Commands/ElevatorRun.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Elevator::Elevator() : frc::Subsystem("Elevator") {
#if defined (ROBOTNOTSTANDALONE) || defined (ROBOTBENCHTOPTEST)
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    motorL11 = RobotMap::elevatorMotorL11;
    motorR12 = RobotMap::elevatorMotorR12;
    hallSensor = RobotMap::elevatorHallSensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    motorL11->SetInverted(false);			// Sets the Talon invertion to false
    motorR12->SetInverted(false);			// Sets the Talon invertion to false
   // Initialize encoders to start at zero
    motorL11->SetSelectedSensorPosition(0, pidIndex, timeout);

    // Set the control mode and target;
    motorL11->Set(ControlMode::Position, 0.0);
    motorR12->Set(ControlMode::Follower, 11);

    // Set to brake mode (in comparison to coast)
    motorL11->SetNeutralMode(NeutralMode::Brake);
    motorR12->SetNeutralMode(NeutralMode::Brake);

    std::printf("2135: Motor L11 ID %d ver %d.%d\n", motorL11->GetDeviceID(), motorL11->GetFirmwareVersion()/256, motorL11->GetFirmwareVersion()%256);
    std::printf("2135: Motor R12 ID %d ver %d.%d\n", motorR12->GetDeviceID(), motorR12->GetFirmwareVersion()/256, motorR12->GetFirmwareVersion()%256);

    motorL11->ConfigSelectedFeedbackSensor(FeedbackDevice::CTRE_MagEncoder_Relative, 0, timeout);
    motorL11->SetSensorPhase(false);

	// Set power and timeout
	motorL11->ConfigPeakOutputForward(256, timeout);
	motorL11->ConfigPeakOutputReverse(-256, timeout);

    // Set proportional
    motorL11->Config_kP(0, 5120/COUNTS_PER_ROTATION, timeout);

    // Set closed loop error
    motorL11->ConfigAllowableClosedloopError(0, 10, timeout);

#endif

    // Initialize variables
    m_pidStarted = false;
    hallSensor = RobotMap::elevatorHallSensor;
}

void Elevator::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
//#ifdef ROBOTNOTSTANDALONE
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
//#endif
}

void Elevator::Periodic() {
    // Put code here to be run every loop
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Elevator::ElevatePIDInit(double inches) {
//#ifdef ROBOTNOTSTANDALONE
//	double m_target = counts / (4.0 * M_PI / COUNTS_PER_ROTATION);

	m_inches = inches;

	double counts = (inches / circumInches) * COUNTS_PER_ROTATION;

	std::printf("2135: Elevate Init\n");

	// Set encoder position to zero
	motorL11->SetSelectedSensorPosition(0, pidIndex, 0);

	// Set the mode and target
	motorL11->Set(ControlMode::Position, counts);

	m_pidStarted = false;
//#endif
}

void Elevator::ElevatePIDExecute() {
	std::printf("2135: Elevate periodic\n");
	// Nothing here because this will be done in the talon
}

bool Elevator::ElevatePIDatSetPoint() {
	bool pidFinished = false;

	int closedLoopError = 0;	// initialized for ROBOTNOTSTANDALONE mode


	// Detect if closed loop error has been updated
#if defined (ROBOTNOTSTANDALONE) || defined (ROBOTBENCHTOPTEST)
	closedLoopError = motorL11->GetClosedLoopError(0);
	std::printf("2135: Closed Loop error %d\n", closedLoopError);
	std::printf("2135: Encoder count %d\n", motorL11->GetSelectedSensorPosition(0));

	// Check if it is within tolerance
	double motorOutput = motorL11->GetMotorOutputPercent();
	if (abs(motorOutput) >= 0.4) { // TODO: Change this to get the tolerance
		m_pidStarted = true;
		std::printf("2135: PID Started\n");
	}

	std::printf("2135: Motor Output: %f\n", motorOutput);
//	if (m_pidStarted == true && abs(motorOutput) <= 0.1) {
//		pidFinished = true;
//		std::printf("2135: Finished\n");
//	}

	if (m_pidStarted == true && closedLoopError <= 20) {
		pidFinished = true;
		std::printf("2135: Finished\n");
	}
#endif

	if (hallSensor->Get() == false) {
		std::printf("2135: Hall Effect Detected\n");
	}
	return pidFinished;
}

void Elevator::ElevatePIDStop() {
#if defined (ROBOTNOTSTANDALONE) || defined (ROBOTBENCHTOPTEST)
	std::printf("2135: Elevate STOP\n");

	// Set the driving mode and target
	motorL11->Set(ControlMode::PercentOutput, 0.0);

//	motorL11->SetSelectedSensorPosition(0, pidIndex, timeout);
//	motorL11->SetSelectedSensorPosition(0, pidIndex, timeout);
#endif

}
