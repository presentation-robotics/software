// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ctre/Phoenix.h"

#include "../RobotDefaults.h"
#include "Gripper.h"
#include "../RobotMap.h"
#include "../Commands/GripperRun.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Gripper::Gripper() : frc::Subsystem("Gripper") {
	std::printf("2135: Gripper Constructor\n");

#ifndef ROBORIO_STANDALONE
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    motorL11 = RobotMap::gripperMotorL11;
    motorR12 = RobotMap::gripperMotorR12;
    motorW14 = RobotMap::gripperMotorW14;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    motorL11->SetInverted(false);
    motorR12->SetInverted(true);
    // motorW14->SetInverted(false); 	// TODO: Have to test this on the actual robot

    // motorW14->SetSelectedSensorPosition(0, pidIndex, timeout);

    motorL11->Set(ControlMode::PercentOutput, 0.0);
    motorR12->Set(ControlMode::PercentOutput, 0.0);
    // motorW14->Set(ControlMode::Position, 0.0);

    motorL11->SetNeutralMode(NeutralMode::Brake);
    motorR12->SetNeutralMode(NeutralMode::Brake);
    // motorW14->SetNeutralMode(NeutralMode::Brake);

    std::printf("2135: Motor L11 ID %d ver %d.%d\n", motorL11->GetDeviceID(), motorL11->GetFirmwareVersion()/256, motorL11->GetFirmwareVersion()%256);
    std::printf("2135: Motor R12 ID %d ver %d.%d\n", motorR12->GetDeviceID(), motorR12->GetFirmwareVersion()/256, motorR12->GetFirmwareVersion()%256);
//    std::printf("2135: Motor W14 ID %d ver %d.%d\n", motorW14->GetDeviceID(), motorW14->GetFirmwareVersion()/265, motorW14->GetFirmwareVersion()%265);

    motorW14->ConfigSelectedFeedbackSensor(FeedbackDevice::CTRE_MagEncoder_Relative, pidIndex, timeout);
    // motorW14->SetSensorPhase(false);

    // Set power and timeout
    // motorW14->ConfigPeakOutputForward(102.3, timeout);
    // motorW14->ConfigPeakOutputReverse(-102.3, timeout);

    // Set proportional
    // motorW14->Config_kP(0, COUNTS_PER_ROTATION, timeout); // TODO: Set the proportional

    // Set closed loop error
    // motorW14->ConfigAllowableClosedloopError(0, 10, timeout);
#endif
    // Initialize Variables
    m_pidStarted = false;

    RobotConfig* config = RobotConfig::GetInstance();
    config->GetValueAsDouble("G_MotorSpeed", m_gripperSpeed, -1.0);
    config->GetValueAsDouble("G_WristSpeed", m_wristSpeed, 1.0); //TODO: check sign +/-
}

void Gripper::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
#ifndef ROBORIO_STANDALONE
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new GripperRun(0));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
#endif
}

void Gripper::Initialize(frc::Preferences *RobotConfig)
{
#ifndef ROBORIO_STANDALONE
	std::printf("2135: Gripper Init\n");
	motorL11->Set(ControlMode::PercentOutput, 0.0);
	motorR12->Set(ControlMode::PercentOutput, 0.0);
	// motorW14->Set(ControlMode::PercentOutput, 0.0);
#endif

}
void Gripper::Periodic() {
#ifndef ROBORIO_STANDALONE
	SmartDashboard::PutNumber("Gripper counts", motorW14->GetSelectedSensorPosition(pidIndex));
#endif
    // Put code here to be run every loop

}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Gripper::SetGripperMotorSpeed(int direction)
{
	double outputL = 0.0; 		//Default: off
	double outputR = 0.0; 		//Default: off

	switch (direction)
	{
	default:
	case GRIPPER_STOP:
		outputL = 0.0;
		outputR = 0.0;
		break;
	case GRIPPER_FORWARD:
		outputL = m_gripperSpeed;
		outputR = m_gripperSpeed;
		break;
	case GRIPPER_REVERSE:
		outputL = -m_gripperSpeed;
		outputR = -m_gripperSpeed;
		break;
	case GRIPPER_SPIN:
		outputL = m_gripperSpeed;
		outputR = -m_gripperSpeed;
		break;
	}

#ifndef ROBORIO_STANDALONE
	motorL11->Set(ControlMode::PercentOutput, outputL);
	motorR12->Set(ControlMode::PercentOutput, outputR);
#endif
}

void Gripper::SetWristMotorSpeed(int speed)
{
	double output = 0.0; 		//Default: off

	switch (speed)
	{
	default:
	case WRIST_STOP:
		output = 0.0;
		break;
	case WRIST_IN:
		output = m_wristSpeed;
		break;
	case WRIST_OUT:
		output = -m_wristSpeed;
		break;
	}

#ifndef ROBORIO_STANDALONE

#if 0
	motorW14->Set(ControlMode::PercentOutput, output);
#else
	(void) output;
#endif

#endif
}

void Gripper::ExtensionPIDInit(double angle)
{
	std::printf("2135: Extension Started\n");

	double target;

	target = (angle * COUNTS_PER_ROTATION) / 360.0;

#ifndef ROBORIO_STANDALONE
	// Set Encoder Position to zero
	// motorW14->SetSelectedSensorPosition(0, pidIndex, 0);

	// Set the mode and target
#if 0
	motorW14->Set(ControlMode::Position, target);
#else
	(void) target;
#endif

#endif

	m_pidStarted = false;
}

void Gripper::ExtensionPIDExecute(void)
{
	// No work needed because Talon does it internally
}

bool Gripper::ExtensionPIDIsAtSetpoint(void)
{
	bool pidFinished = false;
	int encoderCounts = 0;
	double motorOutput = 0.0;
	int closedLoopError = 0;

#ifndef ROBORIO_STANDALONE
//	encoderCounts = motorW14->GetSelectedSensorPosition(0);
//	motorOutput = motorW14->GetMotorOutputPercent();
//	closedLoopError = motorW14->GetClosedLoopError(0);
#endif
	// Detect if closed loop error has been updates
	// TODO: This is an invalid test of whether the PID started
	if (abs(motorOutput) >= 0.4) {
		m_pidStarted = true;
		std::printf("PID Started\n");
	}

	std::printf("2135: Encoder count %d\n", encoderCounts);
	std::printf("2135: Closed loop error %d\n", closedLoopError);
	std::printf("2135: Motor Output: %f\n", motorOutput);

	if (m_pidStarted == true && closedLoopError <= 20) {
		pidFinished = true;
		std::printf("2135: PID Finished\n");
	}

	return pidFinished;
}

void Gripper::ExtensionPIDStop(void)
{
	std::printf("2135: Extension STOP\n");

#ifndef ROBORIO_STANDALONE
	// Set back to driving mode and target
	// motorW14->Set(ControlMode::PercentOutput, 0.0);
#endif
}
