// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ctre/Phoenix.h"

#include "Gripper.h"
#include "../RobotMap.h"
#include "../Commands/GripperRun.h"
#include "../frc2135/TalonSRXUtils.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Gripper::Gripper() : frc::Subsystem("Gripper") {
	std::printf("2135: GR Gripper Constructor\n");

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    motorL11 = RobotMap::gripperMotorL11;
    motorR12 = RobotMap::gripperMotorR12;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Validate Talon SRX controllers, initialize and display firmware versions
    m_talonValidL11 = frc2135::TalonSRXUtils::TalonSRXCheck(motorL11, "GR", "L11");
    m_talonValidR12 = frc2135::TalonSRXUtils::TalonSRXCheck(motorR12, "GR", "R12");

    // Initialize Variables
    frc2135::RobotConfig* config = frc2135::RobotConfig::GetInstance();
    config->GetValueAsDouble("GR_AcquireSpeed", m_acquireSpeed, 0.70);
    config->GetValueAsDouble("GR_HoldSpeed", m_holdSpeed, 0.25);
    config->GetValueAsDouble("GR_ExpelSpeed", m_expelSpeed, 0.50);

    // Set motor directions
    // Turn on Brake mode (not coast)
    // Initialize modes and set power to off
    // Set motor peak outputs - acquire is fastest speed
    if (m_talonValidL11) {
        motorL11->SetInverted(false);
        motorL11->SetNeutralMode(NeutralMode::Brake);
        motorL11->Set(ControlMode::PercentOutput, 0.0);
        motorL11->ConfigPeakOutputForward(m_acquireSpeed, m_timeout);
        motorL11->ConfigPeakOutputReverse(-m_acquireSpeed, m_timeout);
    }

    if (m_talonValidR12) {
        motorR12->SetInverted(true);
        motorR12->SetNeutralMode(NeutralMode::Brake);
        motorR12->Set(ControlMode::PercentOutput, 0.0);
        motorR12->ConfigPeakOutputForward(m_acquireSpeed, m_timeout);
        motorR12->ConfigPeakOutputReverse(-m_acquireSpeed, m_timeout);
    }

	m_spinLeft = false;
}

void Gripper::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Gripper::Periodic() {
	double	outputL11 = 0.0, currentL11 = 0.0;
	double	outputR12 = 0.0, currentR12 = 0.0;

	if (m_talonValidL11) {
		outputL11 = motorL11->GetMotorOutputVoltage();
		currentL11 = motorL11->GetOutputCurrent();
	}

	if (m_talonValidR12) {
		outputR12 = motorR12->GetMotorOutputVoltage();
		currentR12 = motorR12->GetOutputCurrent();
	}

	if (m_gripperDebug) {
		SmartDashboard::PutNumber("GR_Output_L11", outputL11);
		SmartDashboard::PutNumber("GR_Current_L11", currentL11);
		SmartDashboard::PutNumber("GR_Output_R12", outputR12);
		SmartDashboard::PutNumber("GR_Current_R12", currentR12);
	}
}

///////////////////////////////////////////////////////////////////////////////

// Put methods for controlling this subsystem
// here. Call these from Commands.

void Gripper::Initialize(void) {
	std::printf("2135: GR Init\n");
	// All motors off
	if (m_talonValidL11)
		motorL11->Set(ControlMode::PercentOutput, 0.0);
	if (m_talonValidR12)
		motorR12->Set(ControlMode::PercentOutput, 0.0);
}

void Gripper::SetGripperMotorSpeed(int direction) {
	const char *strName;
	double outputL = 0.0; 		//Default: off
	double outputR = 0.0; 		//Default: off

	switch (direction)
	{
	default:
	case GRIPPER_STOP:
		strName = "STOP";
		outputL = 0.0;
		outputR = 0.0;
		break;
	case GRIPPER_FORWARD:
		strName = "FORWARD";
		outputL = m_acquireSpeed;
		outputR = m_acquireSpeed;
		break;
	case GRIPPER_HOLD:
		strName = "HOLD";
		outputL = m_holdSpeed;
		outputR = m_holdSpeed;
		break;
	case GRIPPER_REVERSE:
		strName = "REVERSE";
		outputL = -m_expelSpeed;
		outputR = -m_expelSpeed;
		break;
	case GRIPPER_SPIN:
		strName = "SPIN";
		if (m_spinLeft) {
			outputL = m_acquireSpeed;
			outputR = -m_acquireSpeed;
		}
		else {
			outputL = -m_acquireSpeed;
			outputR = m_acquireSpeed;
		}
		m_spinLeft = !m_spinLeft;		// Alternate direction each time we set speed
		break;
	}

	std::printf("2135: Gripper Set Speed - %s\n", strName);

	if (m_talonValidL11)
		motorL11->Set(ControlMode::PercentOutput, outputL);
	if (m_talonValidR12)
		motorR12->Set(ControlMode::PercentOutput, outputR);
}
