// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef ELEVATOR_H
#define ELEVATOR_H
#include "Commands/Subsystem.h"
#include "WPILib.h"
#include "../RobotDefaults.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class Elevator: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
#if defined (ROBOTNOTSTANDALONE) || defined (ROBOTBENCHTOPTEST)
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<WPI_TalonSRX> motorL11;
	std::shared_ptr<WPI_TalonSRX> motorR12;
	std::shared_ptr<frc::DigitalInput> hallSensorTop;
	std::shared_ptr<frc::DigitalInput> hallSensorBottom;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
#endif

	double m_gripperSpeed;

	const int 		pidIndex = 0; 					// PID Slot index for sensors
	const int		timeout = 10;					// CAN timeout in msec to wait for response
	const double 	COUNTS_PER_ROTATION = (1024*4);	// CPR is 1024 and multipled by 4 because it is a quadrature encoder
	double			m_inches;								//Inches that are put into elevator
	bool             m_pidStarted;                    // Indicates that PID started and Closed Loop is valid

#ifdef ROBOTBENCHTOPTEST
	const double 	circumInches = (1.875*M_PI*2);		//Circumference in inches for Benchtop Testing
#else
	const double 	circumInches = (0.9905*M_PI);		//Circumference in inches (Real Robot)
#endif

public:
	Elevator();
	void InitDefaultCommand() override;
	enum {ELEVATOR_STOP = 0, ELEVATOR_UP = 1, ELEVATOR_DOWN = -1};
	void Periodic() override;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	void SetMotorSpeed(int speed);

	void ElevatePIDInit(double inches);
	void ElevatePIDExecute(void);
	bool ElevatePIDatSetPoint(void);
	void ElevatePIDStop(void);
	void Calibrate(void);
	bool CalibrateIsFinished(void);
	void CalibrateStop(void);
	void MoveToTopLimit(void);
	bool MoveToTopLimitIsFinished(void);
	void MoveToTopLimitStop(void);
};

#endif
