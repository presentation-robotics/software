// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutoPos2.h"
#include "AutoPosANYMove.h"
#include "AutoPos2SwitchRight.h"
#include "AutoPos2SwitchLeft.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutoPos2::AutoPos2(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	std::printf("2135: Auto Pos 2 Constructor\n");
}// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutoPos2::Initialize() {
	std::printf("2135: Auto Pos 2 - Init\n");

}

// Called repeatedly when this Command is scheduled to run
void AutoPos2::Execute() {
	// Wait for gameData before scheduling next steps
}

// Make this return true when this Command no longer needs to run execute()
bool AutoPos2::IsFinished() {
	bool	isFinished = false;

	// Check if gameData has been sent
	std::string alliSwitch;
	std::string scale;
	frc::Command* cmd;

	alliSwitch = SmartDashboard::GetString(ROBOT_FMSALLISWITCH, ROBOT_FMS_UNINIT);
	// If not the uninitialized string, then new data received
    if(alliSwitch.compare(ROBOT_FMS_UNINIT) && !alliSwitch.empty())
    {
    	scale = SmartDashboard::GetString(ROBOT_FMSSCALE, ROBOT_FMS_UNINIT);
    	std::printf("2135: Auto Pos 2 - switch: %s scale %s\n",alliSwitch.c_str(), scale.c_str());
    	// Build group command for Pos 2 decisions here!

    	if (alliSwitch == ROBOT_FMS_LEFT) {
    		cmd = new(AutoPos2SwitchLeft);
    		cmd->Start();
    	}
    	else {
    		cmd = new(AutoPos2SwitchRight);
    		cmd->Start();
    	}

    	// If switch == left
    	//		attack the switch plate on the left
    	// Else		/* switch is right */
    	//		attack the switch plate on the right

    	// Let this command finish
    	isFinished = true;
    }
    return isFinished;
}

// Called once after isFinished returns true
void AutoPos2::End() {
	std::printf("2135: Auto Pos 2 - End\n");

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutoPos2::Interrupted() {
	std::printf("2135: Auto Pos 2 - Interrupted\n");
}
