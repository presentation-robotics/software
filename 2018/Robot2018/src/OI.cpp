// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutoDriveDist.h"
#include "Commands/AutoDriveTurn.h"
#include "Commands/AutoPos123Move.h"
#include "Commands/AutoPos1Switch.h"
#include "Commands/AutoPos2Switch.h"
#include "Commands/AutoPos3Switch.h"
#include "Commands/AutoStop.h"
#include "Commands/DriveShift.h"
#include "Commands/DriveSpin.h"
#include "Commands/DriveStop.h"
#include "Commands/DriveTeleop.h"
#include "Commands/ElevatorBump.h"
#include "Commands/ElevatorCalibrate.h"
#include "Commands/ElevatorCalibrateOverride.h"
#include "Commands/ElevatorRun.h"
#include "Commands/GripperRun.h"
#include "Commands/LoadConfig.h"
#include "Commands/WristRun.h"
#include "Commands/ZeroWristEncoder.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    operatorBoard2.reset(new frc::Joystick(2));
    
    wristFromDash.reset(new frc::JoystickButton(operatorBoard2.get(), 4));
    wristFromDash->WhenPressed(new WristRun(3));
    elevatorFromDash.reset(new frc::JoystickButton(operatorBoard2.get(), 5));
    elevatorFromDash->WhenPressed(new ElevatorRun(6));
    elevatorLevitate.reset(new frc::JoystickButton(operatorBoard2.get(), 3));
    elevatorLevitate->WhenPressed(new ElevatorRun(0));
    elevatorClimb.reset(new frc::JoystickButton(operatorBoard2.get(), 2));
    elevatorClimb->WhenPressed(new ElevatorRun(0));
    elevatorBumpDown.reset(new frc::JoystickButton(operatorBoard2.get(), 1));
    elevatorBumpDown->WhenPressed(new ElevatorBump(false));
    operatorBoard1.reset(new frc::Joystick(1));
    
    elevatorBumpUp.reset(new frc::JoystickButton(operatorBoard1.get(), 11));
    elevatorBumpUp->WhenPressed(new ElevatorBump(true));
    elevatorScaleHigh.reset(new frc::JoystickButton(operatorBoard1.get(), 9));
    elevatorScaleHigh->WhenPressed(new ElevatorRun(0));
    elevatorScaleLow.reset(new frc::JoystickButton(operatorBoard1.get(), 10));
    elevatorScaleLow->WhenPressed(new ElevatorRun(0));
    elevatorSwitch.reset(new frc::JoystickButton(operatorBoard1.get(), 7));
    elevatorSwitch->WhenPressed(new ElevatorRun(0));
    elevatorFloor.reset(new frc::JoystickButton(operatorBoard1.get(), 8));
    elevatorFloor->WhenPressed(new ElevatorRun(0));
    wristAcquire.reset(new frc::JoystickButton(operatorBoard1.get(), 4));
    wristAcquire->WhenPressed(new WristRun(2));
    wristDeliver.reset(new frc::JoystickButton(operatorBoard1.get(), 5));
    wristDeliver->WhenPressed(new WristRun(1));
    wristStow.reset(new frc::JoystickButton(operatorBoard1.get(), 6));
    wristStow->WhenPressed(new WristRun(0));
    gripperSpin.reset(new frc::JoystickButton(operatorBoard1.get(), 3));
    gripperSpin->WhileHeld(new GripperRun(2));
    gripperExpel.reset(new frc::JoystickButton(operatorBoard1.get(), 2));
    gripperExpel->WhileHeld(new GripperRun(-1));
    gripperAcquire.reset(new frc::JoystickButton(operatorBoard1.get(), 1));
    gripperAcquire->WhileHeld(new GripperRun(1));
    dStick.reset(new frc::Joystick(0));
    
    elevatorUp.reset(new frc::JoystickButton(dStick.get(), 11));
    elevatorUp->WhileHeld(new ElevatorRun(0));
    elevatorDown.reset(new frc::JoystickButton(dStick.get(), 10));
    elevatorDown->WhileHeld(new ElevatorRun(0));
    cubeExpel.reset(new frc::JoystickButton(dStick.get(), 7));
    cubeExpel->WhileHeld(new GripperRun(-1));
    cubeAcquire.reset(new frc::JoystickButton(dStick.get(), 6));
    cubeAcquire->WhileHeld(new GripperRun(1));
    spinRight.reset(new frc::JoystickButton(dStick.get(), 5));
    spinRight->WhileHeld(new DriveSpin(true));
    spinLeft.reset(new frc::JoystickButton(dStick.get(), 4));
    spinLeft->WhileHeld(new DriveSpin(false));
    shiftSpeed.reset(new frc::JoystickButton(dStick.get(), 1));
    shiftSpeed->WhileHeld(new DriveShift(true));

    // SmartDashboard Buttons
    frc::SmartDashboard::PutData("Zero Wrist Encoder", new ZeroWristEncoder());
    frc::SmartDashboard::PutData("Load Config", new LoadConfig());
    frc::SmartDashboard::PutData("Wrist Run: WRIST_STOWED", new WristRun(2));
    frc::SmartDashboard::PutData("Wrist Run: WRIST_DELIVER", new WristRun(1));
    frc::SmartDashboard::PutData("Wrist Run: WRIST_FLAT", new WristRun(0));
    frc::SmartDashboard::PutData("Wrist Run: WRIST_SMARTDASH", new WristRun(3));
    frc::SmartDashboard::PutData("Wrist Run: WRIST_NOCHANGE", new WristRun(-1));
    frc::SmartDashboard::PutData("Elevator Calibrate Override", new ElevatorCalibrateOverride());
    frc::SmartDashboard::PutData("Elevator Calibrate", new ElevatorCalibrate());
    frc::SmartDashboard::PutData("Elevator Bump: BUMP_UP", new ElevatorBump(true));
    frc::SmartDashboard::PutData("Elevator Bump: BUMP_DOWN", new ElevatorBump(false));
    frc::SmartDashboard::PutData("Elevator Run: FLOOR_HEIGHT", new ElevatorRun(0));
    frc::SmartDashboard::PutData("Elevator Run: SWITCH_HEIGHT", new ElevatorRun(1));
    frc::SmartDashboard::PutData("Elevator Run: SCALE_LO_HEIGHT", new ElevatorRun(2));
    frc::SmartDashboard::PutData("Elevator Run: SCALE_HI_HEIGHT", new ElevatorRun(3));
    frc::SmartDashboard::PutData("Elevator Run: CLIMB_HEIGHT", new ElevatorRun(4));
    frc::SmartDashboard::PutData("Elevator Run: LEVITATE_HEIGHT", new ElevatorRun(5));
    frc::SmartDashboard::PutData("Elevator Run: SMARTDASH_HEIGHT", new ElevatorRun(6));
    frc::SmartDashboard::PutData("Auto Drive Dist: DEFAULT_DIST", new AutoDriveDist(48.0));
    frc::SmartDashboard::PutData("Auto Drive Turn: DEFAULT_ANGLE", new AutoDriveTurn(45.0));
    frc::SmartDashboard::PutData("Auto Stop", new AutoStop());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<frc::Joystick> OI::getDStick() {
   return dStick;
}

std::shared_ptr<frc::Joystick> OI::getOperatorBoard1() {
   return operatorBoard1;
}

std::shared_ptr<frc::Joystick> OI::getOperatorBoard2() {
   return operatorBoard2;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
