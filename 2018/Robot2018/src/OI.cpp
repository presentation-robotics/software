// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutoDriveDistance.h"
#include "Commands/AutoDriveTurn.h"
#include "Commands/AutoStop.h"
#include "Commands/DriveShift.h"
#include "Commands/DriveSpin.h"
#include "Commands/DriveStop.h"
#include "Commands/DriveTeleop.h"
#include "Commands/ElevatorBump.h"
#include "Commands/ElevatorCalibrate.h"
#include "Commands/ElevatorCalibrateOverride.h"
#include "Commands/ElevatorRun.h"
#include "Commands/GripperExtend.h"
#include "Commands/GripperRun.h"
#include "Commands/LoadConfig.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    newOperatorBoard.reset(new frc::Joystick(2));
    
    elevatorRetract.reset(new frc::JoystickButton(newOperatorBoard.get(), 12));
    elevatorRetract->WhileHeld(new ElevatorBump(false));
    elevatorExtend.reset(new frc::JoystickButton(newOperatorBoard.get(), 11));
    elevatorExtend->WhileHeld(new ElevatorBump(true));
    elevatorScaleLow.reset(new frc::JoystickButton(newOperatorBoard.get(), 10));
    elevatorScaleLow->WhenPressed(new ElevatorRun(66));
    elevatorScaleHigh.reset(new frc::JoystickButton(newOperatorBoard.get(), 9));
    elevatorScaleHigh->WhenPressed(new ElevatorRun(77));
    elevatorFloor.reset(new frc::JoystickButton(newOperatorBoard.get(), 8));
    elevatorFloor->WhenPressed(new ElevatorRun(0));
    elevatorSwitch.reset(new frc::JoystickButton(newOperatorBoard.get(), 7));
    elevatorSwitch->WhenPressed(new ElevatorRun(28.75));
    gripperStow.reset(new frc::JoystickButton(newOperatorBoard.get(), 6));
    gripperStow->WhenPressed(new GripperExtend(2));
    gripperDelivery.reset(new frc::JoystickButton(newOperatorBoard.get(), 5));
    gripperDelivery->WhenPressed(new GripperExtend(1));
    gripperFlat.reset(new frc::JoystickButton(newOperatorBoard.get(), 4));
    gripperFlat->WhenPressed(new GripperExtend(2));
    gripperSpin.reset(new frc::JoystickButton(newOperatorBoard.get(), 3));
    gripperSpin->WhileHeld(new GripperRun(2));
    gripperExpel.reset(new frc::JoystickButton(newOperatorBoard.get(), 2));
    gripperExpel->WhileHeld(new GripperRun(-1));
    gripperAcquire.reset(new frc::JoystickButton(newOperatorBoard.get(), 1));
    gripperAcquire->WhileHeld(new GripperRun(1));
    oldOperatorBoard.reset(new frc::Joystick(1));
    
    elevator_Retract.reset(new frc::JoystickButton(oldOperatorBoard.get(), 13));
    elevator_Retract->WhileHeld(new ElevatorBump(false));
    elevator_Extend.reset(new frc::JoystickButton(oldOperatorBoard.get(), 12));
    elevator_Extend->WhileHeld(new ElevatorBump(true));
    elevator_Scale_Low.reset(new frc::JoystickButton(oldOperatorBoard.get(), 11));
    elevator_Scale_Low->WhenPressed(new ElevatorRun(66));
    elevator_Scale_High.reset(new frc::JoystickButton(oldOperatorBoard.get(), 10));
    elevator_Scale_High->WhenPressed(new ElevatorRun(77));
    elevator_Floor.reset(new frc::JoystickButton(oldOperatorBoard.get(), 9));
    elevator_Floor->WhenPressed(new ElevatorRun(0));
    elevator_Switch.reset(new frc::JoystickButton(oldOperatorBoard.get(), 8));
    elevator_Switch->WhenPressed(new ElevatorRun(28.75));
    gripper_Delivery.reset(new frc::JoystickButton(oldOperatorBoard.get(), 6));
    gripper_Delivery->WhenPressed(new GripperExtend(1));
    gripper_Flat.reset(new frc::JoystickButton(oldOperatorBoard.get(), 5));
    gripper_Flat->WhenPressed(new GripperExtend(2));
    gripper_Stow.reset(new frc::JoystickButton(oldOperatorBoard.get(), 4));
    gripper_Stow->WhenPressed(new GripperExtend(0));
    gripper_Spin.reset(new frc::JoystickButton(oldOperatorBoard.get(), 3));
    gripper_Spin->WhileHeld(new GripperRun(2));
    gripper_Expel.reset(new frc::JoystickButton(oldOperatorBoard.get(), 2));
    gripper_Expel->WhileHeld(new GripperRun(-1));
    gripper_Acquire.reset(new frc::JoystickButton(oldOperatorBoard.get(), 1));
    gripper_Acquire->WhileHeld(new GripperRun(1));
    dStick.reset(new frc::Joystick(0));
    
    elevatorDown.reset(new frc::JoystickButton(dStick.get(), 10));
    elevatorDown->WhileHeld(new ElevatorRun(0));
    elevatorUp.reset(new frc::JoystickButton(dStick.get(), 11));
    elevatorUp->WhileHeld(new ElevatorRun(0));
    cubeExpel.reset(new frc::JoystickButton(dStick.get(), 7));
    cubeExpel->WhileHeld(new GripperRun(-1));
    cubeAcquire.reset(new frc::JoystickButton(dStick.get(), 6));
    cubeAcquire->WhileHeld(new GripperRun(1));
    shiftSpeed.reset(new frc::JoystickButton(dStick.get(), 1));
    shiftSpeed->WhileHeld(new DriveShift(true));
    spinLeft.reset(new frc::JoystickButton(dStick.get(), 4));
    spinLeft->WhileHeld(new DriveSpin(false));
    spinRight.reset(new frc::JoystickButton(dStick.get(), 5));
    spinRight->WhileHeld(new DriveSpin(true));

    // SmartDashboard Buttons
    frc::SmartDashboard::PutData("Load Config", new LoadConfig());
    frc::SmartDashboard::PutData("Elevator Calibrate Override", new ElevatorCalibrateOverride());
    frc::SmartDashboard::PutData("Elevator Calibrate", new ElevatorCalibrate());
    frc::SmartDashboard::PutData("Elevator Bump: UP", new ElevatorBump(true));
    frc::SmartDashboard::PutData("Gripper Extend: position", new GripperExtend(0));
    frc::SmartDashboard::PutData("Auto Drive Turn", new AutoDriveTurn());
    frc::SmartDashboard::PutData("Auto Stop", new AutoStop());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    frc::SmartDashboard::PutData("Auto Drive Distance", new AutoDriveDistance(0));
    frc::SmartDashboard::PutData("Elevator Run", new ElevatorRun(5)); //Eventually pass in variable in inches
    frc::SmartDashboard::PutData("Elevator Run For 17", new ElevatorRun(17)); // For testing
    frc::SmartDashboard::PutData("Elevator Run For -2", new ElevatorRun(-2)); // For testing negative safety
    frc::SmartDashboard::PutData("Elevator Run for 5", new ElevatorRun(5));   // For testing
    frc::SmartDashboard::PutData("Elevator Run For 10", new ElevatorRun(10)); // For testing
    frc::SmartDashboard::PutData("Elevator Run For 22", new ElevatorRun(22)); // For testing
    frc::SmartDashboard::PutData("Elevator Run For 33", new ElevatorRun(33)); // For testing

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<frc::Joystick> OI::getDStick() {
   return dStick;
}

std::shared_ptr<frc::Joystick> OI::getOldOperatorBoard() {
   return oldOperatorBoard;
}

std::shared_ptr<frc::Joystick> OI::getNewOperatorBoard() {
   return newOperatorBoard;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
