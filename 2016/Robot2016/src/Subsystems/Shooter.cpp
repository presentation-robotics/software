// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Shooter.h"
#include "../RobotMap.h"
#include "../Robot.h"
#include "../Commands/ShootPresets.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Shooter::Shooter() : Subsystem("Shooter") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    lowerMotor = RobotMap::shooterLowerMotor;
    upperMotor = RobotMap::shooterUpperMotor;
    frameSolenoid = RobotMap::shooterFrameSolenoid;
    fireSolenoid = RobotMap::shooterFireSolenoid;
    whiskerSolenoid = RobotMap::shooterWhiskerSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    lowerMotor->SetSafetyEnabled(false);
    upperMotor->SetSafetyEnabled(false);

    lowerMotor->ConfigNeutralMode(CANSpeedController::NeutralMode::kNeutralMode_Brake);
    upperMotor->ConfigNeutralMode(CANSpeedController::NeutralMode::kNeutralMode_Brake);

    upperMotor->SetFeedbackDevice(CANTalon::FeedbackDevice::CtreMagEncoder_Relative);
    upperMotor->ConfigEncoderCodesPerRev(4096);
    upperMotor->SetSensorDirection(false);
    upperMotor->SetEncPosition(0);

    lowerMotor->SetFeedbackDevice(CANTalon::FeedbackDevice::CtreMagEncoder_Relative);
    lowerMotor->ConfigEncoderCodesPerRev(4096);
    lowerMotor->SetSensorDirection(true);
    lowerMotor->SetEncPosition(0);

    SetFrameControl(false);
    SetFireSolenoid(true);
    SetWhiskerControl(false);
}

void Shooter::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new ShootPresets(0));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Shooter::Initialize(Preferences *prefs) {
	printf("2135: Shooter Initialize\n");

	SmartDashboard::PutNumber("ShootLow_Upper", Robot::LoadPreferencesVariable ("ShootLow_Upper", 0.75));
	SmartDashboard::PutNumber("ShootLow_Lower", Robot::LoadPreferencesVariable ("ShootLow_Lower", 0.5));
	SmartDashboard::PutNumber("ShootHigh_Upper", Robot::LoadPreferencesVariable ("ShootHigh_Upper", 0.95));
	SmartDashboard::PutNumber("ShootHigh_Lower", Robot::LoadPreferencesVariable ("ShootHigh_Lower", 0.7));

	SmartDashboard::PutNumber("Shoot Upper", 0.0);
	SmartDashboard::PutNumber("Shoot Lower", 0.0);

	SmartDashboard::PutNumber("Upper Encoder Velocity", upperMotor->GetEncVel());
	SmartDashboard::PutNumber("Lower Encoder Velocity", lowerMotor->GetEncVel());
}

void Shooter::SetMotorSpeeds(double upperSpeed, double lowerSpeed) {
	lowerMotor->Set(lowerSpeed);
	upperMotor->Set(upperSpeed);

	UpdateEncoderDisplays();
}

void Shooter::SetFireSolenoid(bool fire) {
	if (m_frameUpState) {
		m_fireState = fire;
		if (fire) {
			fireSolenoid->Set(DoubleSolenoid::kForward);
		}
		else {
			fireSolenoid->Set(DoubleSolenoid::kReverse);
		}
	}
}

void Shooter::SetFireSolenoidUnsafe(bool fire) {
	if (fire){
		fireSolenoid->Set(DoubleSolenoid::kForward);
	}
	else{
		fireSolenoid->Set(DoubleSolenoid::kReverse);
	}
}

bool Shooter::GetFireSolenoid(void) {
	return m_fireState;
}

void Shooter::SetFrameControl(bool frameUp) {
	m_frameUpState = frameUp;
	if (frameUp) {
		frameSolenoid->Set(frameSolenoid->kForward);
	}
	else {
		frameSolenoid->Set(frameSolenoid->kReverse);
	}
}

void Shooter::SetWhiskerControl(bool setting) {
	if (setting) {
		whiskerSolenoid->Set(whiskerSolenoid->kForward);
	}
	else {
		whiskerSolenoid->Set(whiskerSolenoid->kReverse);
	}
}

void Shooter::UpdateEncoderDisplays( void )
{
	static int updateCounter;			// Counter for updating encoder values

	// Update SmartDashboard values - Each counter tick is 20msec
	if (updateCounter % 5 == 0)
	{
		SmartDashboard::PutNumber("Upper Encoder Velocity", (double) upperMotor->GetEncVel());
		SmartDashboard::PutNumber("Lower Encoder Velocity", (double) lowerMotor->GetEncVel());

		SmartDashboard::PutNumber("Upper Encoder Position", (double) upperMotor->GetEncPosition());
		SmartDashboard::PutNumber("Lower Encoder Position", (double) lowerMotor->GetEncPosition());
	}

	updateCounter++;
}
