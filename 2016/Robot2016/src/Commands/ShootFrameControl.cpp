// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ShootFrameControl.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

ShootFrameControl::ShootFrameControl(bool frameUp): Command() {
    m_frameUp = frameUp;
    m_frameState = FRAME_START;
    m_timeout = 0.0;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooter.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void ShootFrameControl::Initialize() {
	printf("2135: Shooter Frame Extend %s\n", (m_frameUp) ? "UP" : "DOWN");

	m_timer.Reset();
	m_timer.Start();
	m_timeout = Robot::LoadPreferencesVariable("ShootFrameTimeout", 0.4);
	SmartDashboard::PutNumber("ShootFrameTimeout", m_timeout);
	m_frameState = FRAME_START;
}

// Called repeatedly when this Command is scheduled to run
void ShootFrameControl::Execute() {
	if (m_frameUp == true) {
		switch (m_frameState)
			{
			case FRAME_START:	// Basket is up, shooter motors stopped, frame is down
				m_frameState = FRAME_STEP_1;
				Robot::shooter->SetFireSolenoidUnsafe(false);	// Put basket down
				m_timer.Reset();
				m_timer.Start();
				break;
			case FRAME_STEP_1:
				if (m_timer.HasPeriodPassed(0.250)) {			// Wait for basket to drop
					m_frameState = FRAME_STEP_2;
					Robot::shooter->SetMotorSpeeds(0.0, -0.80);	// Start lower motor
					m_timer.Reset();
					m_timer.Start();
				}
				break;
			case FRAME_STEP_2:
				if (m_timer.HasPeriodPassed(m_timeout)) {		// Wait for boulder to come in
					m_frameState = FRAME_STEP_3;
					Robot::shooter->SetMotorSpeeds(0.0, 0.0);	// Stop lower motor
					m_timer.Reset();
					m_timer.Start();
				}
				break;
			case FRAME_STEP_3:
				if (m_timer.HasPeriodPassed(0.2)) {				// Wait for motors to stop
					m_frameState = FRAME_STEP_4;
					Robot::shooter->SetFireSolenoidUnsafe(true); // Raise the basket
					m_timer.Reset();
					m_timer.Start();
				}
				break;
			case FRAME_STEP_4:
				if (m_timer.HasPeriodPassed(0.3)) {				// Wait for basket up
					m_frameState = FRAME_STEP_5;
					Robot::shooter->SetFrameControl(m_frameUp);	// Put the frame up
					m_timer.Reset();
					m_timer.Start();
				}
				break;
			case FRAME_STEP_5:
				if (m_timer.HasPeriodPassed(0.5)) {				// Wait for frame to rise
					m_frameState = FRAME_READY;
					Robot::shooter->SetFireSolenoid(false);		// Put basket down
				}
				break;
			case FRAME_READY:
			default:
				break;
		}
	}
	else {
		switch (m_frameState)
			{
			case FRAME_START:	// Basket is up, shooter motors stopped, frame is up
				m_frameState = FRAME_STEP_1;
				Robot::shooter->SetFireSolenoid(true);			// Basket up
				m_timer.Reset();
				m_timer.Start();
				break;
			case FRAME_STEP_1:
				if (m_timer.HasPeriodPassed(0.5)) {				// Wait for basket
					m_frameState = FRAME_READY;
					Robot::shooter->SetFrameControl(m_frameUp);	// Put frame down
				}
				break;
			case FRAME_READY:									// Done
			default:
				break;
		}
	}

}

// Make this return true when this Command no longer needs to run execute()
bool ShootFrameControl::IsFinished() {
	return (m_frameState == FRAME_READY);
}

// Called once after isFinished returns true
void ShootFrameControl::End() {
	m_timer.Stop();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ShootFrameControl::Interrupted() {
	m_timer.Stop();
}
