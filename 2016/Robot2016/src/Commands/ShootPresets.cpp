// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ShootPresets.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

ShootPresets::ShootPresets(int direction): Command() {
    m_direction = direction;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooter.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

	m_upperMotorSpeed = 0.0;
	m_lowerMotorSpeed = 0.0;
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void ShootPresets::Initialize() {
	Robot::shooter->ShootStartMode();

	//For Low Shot
	if (m_direction == SHOT_LOW) {
		m_upperMotorSpeed = SmartDashboard::GetNumber("ShootLow_Upper", 0.75);
		m_lowerMotorSpeed = SmartDashboard::GetNumber("ShootLow_Lower", 0.5);
		Robot::shooter->SetMotorDirection(true);
		printf("2135: Low Shot speed set\n");
	}

	//For High Shot
	else if (m_direction == SHOT_HIGH) {
		m_upperMotorSpeed = SmartDashboard::GetNumber("ShootHigh_Upper", 0.95);
		m_lowerMotorSpeed = SmartDashboard::GetNumber("ShootHigh_Lower", 0.7);
		Robot::shooter->SetMotorDirection(true);
		printf("2135: High Shot speed set\n");
	}

	//For Reverse Direction
	else if (m_direction == SHOT_REVERSE) {
		m_upperMotorSpeed = -0.75;
		m_lowerMotorSpeed = -0.75;
		Robot::shooter->SetMotorDirection(false);
		printf("2135: Reverse Direction speed set\n");
	}

	else {
		m_upperMotorSpeed = 0;
		m_lowerMotorSpeed = 0;
	}

	SmartDashboard::PutNumber("Shoot Upper", m_upperMotorSpeed);
	SmartDashboard::PutNumber("Shoot Lower", m_lowerMotorSpeed);
}

// Called repeatedly when this Command is scheduled to run
void ShootPresets::Execute() {
	Robot::shooter->SetMotorSpeeds(m_upperMotorSpeed, -m_lowerMotorSpeed);
}

// Make this return true when this Command no longer needs to run execute()
bool ShootPresets::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void ShootPresets::End() {
	Robot::shooter->SetMotorSpeeds(0.0, 0.0);
	Robot::shooter->ShootFinishMode();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ShootPresets::Interrupted() {
	Robot::shooter->SetMotorSpeeds(0.0, 0.0);
	Robot::shooter->ShootFinishMode();
}
