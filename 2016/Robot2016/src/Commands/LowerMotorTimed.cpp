// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "LowerMotorTimed.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

LowerMotorTimed::LowerMotorTimed(double time, double speed): Command() {
    m_time = time;
    m_speed = speed;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooter.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void LowerMotorTimed::Initialize() {
	printf("2135: Lower Motor Timed Enabled\n");
	m_timer.Reset();
	m_timer.Start();
}

// Called repeatedly when this Command is scheduled to run
void LowerMotorTimed::Execute() {
	Robot::shooter->SetMotorSpeeds(0.0, m_speed);
}

// Make this return true when this Command no longer needs to run execute()
bool LowerMotorTimed::IsFinished() {
	return (m_timer.HasPeriodPassed(m_time));
}

// Called once after isFinished returns true
void LowerMotorTimed::End() {
	m_timer.Stop();
	Robot::shooter->SetMotorSpeeds(0.0, 0.0);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void LowerMotorTimed::Interrupted() {
	m_timer.Stop();
	Robot::shooter->SetMotorSpeeds(0.0, 0.0);
}
