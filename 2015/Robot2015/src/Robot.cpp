// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
#include "Robot.h"
#include "Commands/AutoCommand.h"
#include "Commands/AutoContainerSet.h"
#include "Commands/AutoStackTote.h"
#include "Commands/AutoToteSet.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
Chassis* Robot::chassis = 0;
HWheel* Robot::hWheel = 0;
Intake* Robot::intake = 0;
Stacker* Robot::stacker = 0;
Elevator* Robot::elevator = 0;
Pneumatics* Robot::pneumatics = 0;
OI* Robot::oi = 0;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	printf("2135: RobotInit startup\n");
	RobotMap::init();
	printf("2135: RobotInit instantiate subsystems\n");
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	chassis = new Chassis();
	hWheel = new HWheel();
	intake = new Intake();
	stacker = new Stacker();
	elevator = new Elevator();
	pneumatics = new Pneumatics();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	printf("2135: RobotInit instantiate OI\n");
	oi = new OI();
	printf("2135: RobotInit initialize Live Window\n");
	lw = LiveWindow::GetInstance();
	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand = new AutoCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

	printf("2135: RobotInit initialize from preferences file\n");
	prefs = Preferences::GetInstance();
	if(!prefs->ContainsKey("AutoDriveDistance")){
		m_autoSetpoint = prefs->GetDouble("AutoDriveDistance", 95.0);
		printf("2135: AutoDriveDistance Found\n");
	}
	else {
		printf("2135: ERROR - AutoDriveDistance Not Found\n");
	}
	if(!prefs->ContainsKey("PidMaxOutput")){
		m_pidMaxOutput = prefs->GetDouble("PidMaxOutput", 0.6);
		printf("2135: PidMaxOutput Found\n");
	}
	else {
		printf("2135: ERROR - PidMaxOutput Not Found\n");
	}
	if(!prefs->ContainsKey("ChassisMinRange")){
		m_chassisMinRange = prefs->GetDouble("ChassisMinRange", 48.0);
		printf("2135: ChassisMinRange Found\n");
	}
	else {
		printf("2135: ERROR - ChassisMinRange Not Found\n");
	}
	if(!prefs->ContainsKey("ChassisMaxRange")){
		m_chassisMaxRange = prefs->GetDouble("ChassisMaxRange", 54.0);
		printf("2135: ChassisMaxRange Found\n");
	}
	else {
		printf("2135: ERROR - ChassisMaxRange Not Found\n");
	}

	printf("AutoDriveDistance: %f\n", m_autoSetpoint);
	printf("PidMaxOutput:      %f\n", m_pidMaxOutput);
	printf("ChassisMinRange:   %f\n", m_chassisMinRange);
	printf("ChassisMaxRange:   %f\n", m_chassisMaxRange);

	printf("2135: RobotInit build autonomous chooser\n");
	autoChooser = new SendableChooser();
	autoChooser->AddDefault("0 - Move forward", new AutoCommand());
	autoChooser->AddObject("1 - Container set", new AutoContainerSet());
	autoChooser->AddObject("2 - Stack tote", new AutoStackTote());
	autoChooser->AddObject("3 - Tote set", new AutoToteSet());
	SmartDashboard::PutData("Auto modes", autoChooser);
	//autoChooser->AddObject("Score one tote", new );

	Robot::InitSmartDashboard();
}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){
    printf("2135: Disabled Init\n");
}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
	UpdateSmartDashboard();
}

void Robot::AutonomousInit() {
	printf("2135: Autonomous Init");
	autonomousCommand = (Command *) autoChooser->GetSelected();
	if (autonomousCommand != NULL)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
	UpdateSmartDashboard();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != NULL)
		autonomousCommand->Cancel();
	// follower mode is not working when the Chassis constructor is called
	// so we are calling the follower mode in the teleop init
	//Robot::chassis->motorL3->SetControlMode(CANSpeedController::kFollower);
	//Robot::chassis->motorL3->Set(2);

	//Robot::chassis->motorR5->SetControlMode(CANSpeedController::kFollower);
	//Robot::chassis->motorR5->Set(4);
	printf("Teleop Init\n");
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
	UpdateSmartDashboard();
}

void Robot::TestPeriodic() {
	lw->Run();
}

void Robot::InitSmartDashboard() {

	printf("2135: Init SmartDashboard\n");

	SmartDashboard::PutNumber("L: P", chassis->leftPID->GetP());
	SmartDashboard::PutNumber("L: I", chassis->leftPID->GetI());
	SmartDashboard::PutNumber("L: D", chassis->leftPID->GetD());
	SmartDashboard::PutNumber("L: Tolerance", 0.2);
	SmartDashboard::PutNumber("L: Min Output", -m_pidMaxOutput);
	SmartDashboard::PutNumber("L: Max Output", m_pidMaxOutput);
	SmartDashboard::PutNumber("L: Distance PP", 4 * M_PI / 360);
	SmartDashboard::PutNumber("L: Distance", chassis->encoderL->GetDistance());

	SmartDashboard::PutNumber("R: P", chassis->rightPID->GetP());
	SmartDashboard::PutNumber("R: I", chassis->rightPID->GetI());
	SmartDashboard::PutNumber("R: D", chassis->rightPID->GetD());
	SmartDashboard::PutNumber("R: Tolerance", 0.2);
	SmartDashboard::PutNumber("R: Min Output", -m_pidMaxOutput);
	SmartDashboard::PutNumber("R: Max Output", m_pidMaxOutput);
	SmartDashboard::PutNumber("R: Distance PP", 4 * M_PI / 360);
	SmartDashboard::PutNumber("R: Distance", chassis->encoderR->GetDistance());

	SmartDashboard::PutBoolean("Pressure Switch Value", false);
	SmartDashboard::PutNumber("Compressor Current", 0.0);
	SmartDashboard::PutNumber("Target Setpoint", m_autoSetpoint);
	SmartDashboard::PutNumber("Left Setpoint", 0.0);
	SmartDashboard::PutNumber("Right Setpoint", 0.0);
	SmartDashboard::PutNumber("Chassis Min Range", m_chassisMinRange);
	SmartDashboard::PutNumber("Chassis Max Range", m_chassisMaxRange);
	SmartDashboard::PutBoolean("Left PID State", false );
	SmartDashboard::PutBoolean("Right PID State", false );
	SmartDashboard::PutNumber("Temperature", Robot::pneumatics->CheckTemperature());
	SmartDashboard::PutNumber("Potentiometer", Robot::elevator->heightPot->Get());
	SmartDashboard::PutBoolean("ToteFullIn", Robot::stacker->toteFullIn->Get());
	SmartDashboard::PutBoolean("ToteFullOut", Robot::stacker->toteFullOut->Get());
}

void Robot::UpdateSmartDashboard(){

	SmartDashboard::PutNumber("L: Distance", Robot::chassis->encoderL->GetDistance());
	SmartDashboard::PutNumber("L: Speed", Robot::chassis->DriveGetLeftSpeed());
	SmartDashboard::PutNumber("L: Avg Speed", Robot::chassis->DriveGetLeftSpeedAverage());

	SmartDashboard::PutNumber("R: Distance", Robot::chassis->encoderR->GetDistance());
	SmartDashboard::PutNumber("R: Speed", -Robot::chassis->DriveGetRightSpeed());
	SmartDashboard::PutNumber("R: Avg Speed", Robot::chassis->DriveGetRightSpeedAverage());

//	SmartDashboard::PutBoolean("Pressure Switch Value", Robot::pneumatics->compressor->GetPressureSwitchValue());
//	SmartDashboard::PutNumber("Compressor Current", Robot::pneumatics->compressor->GetCompressorCurrent());
	SmartDashboard::PutNumber("Temperature", Robot::pneumatics->CheckTemperature());
	SmartDashboard::PutNumber("Potentiometer", Robot::elevator->heightPot->Get());
	SmartDashboard::PutBoolean("ToteFullIn", Robot::stacker->toteFullIn->Get());
	SmartDashboard::PutBoolean("ToteFullOut", Robot::stacker->toteFullOut->Get());
}


START_ROBOT_CLASS(Robot);

