// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
Encoder* RobotMap::chassisEncoderL = NULL;
SpeedController* RobotMap::chassisMotorL = NULL;
PIDController* RobotMap::chassisLeftPID = NULL;
Encoder* RobotMap::chassisEncoderR = NULL;
SpeedController* RobotMap::chassisMotorR = NULL;
PIDController* RobotMap::chassisRightPID = NULL;
SpeedController* RobotMap::hWheelMotorH = NULL;
Encoder* RobotMap::hWheelEncoderH = NULL;
DoubleSolenoid* RobotMap::hWheelEngage = NULL;
SpeedController* RobotMap::intakeAcquireL = NULL;
SpeedController* RobotMap::intakeAcquireR = NULL;
DoubleSolenoid* RobotMap::intakeClamp = NULL;
DigitalInput* RobotMap::intakeToteFullIn = NULL;
SpeedController* RobotMap::stackerAcquireL = NULL;
SpeedController* RobotMap::stackerAcquireR = NULL;
DoubleSolenoid* RobotMap::stackerClamp = NULL;
DigitalInput* RobotMap::stackerToteFullIn = NULL;
DigitalInput* RobotMap::stackerToteFullOut = NULL;
SpeedController* RobotMap::elevatorMove = NULL;
AnalogPotentiometer* RobotMap::elevatorHeightPot = NULL;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	chassisEncoderL = new Encoder(0, 1, false, Encoder::k4X);
	lw->AddSensor("Chassis", "Encoder L", chassisEncoderL);
	chassisEncoderL->SetDistancePerPulse(1.0);
        chassisEncoderL->SetPIDSourceParameter(Encoder::kDistance);
	chassisMotorL = new Talon(8);
	lw->AddActuator("Chassis", "Motor L", (Talon*) chassisMotorL);
	
	chassisLeftPID = new PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ chassisEncoderL, chassisMotorL, 0.02);
	lw->AddActuator("Chassis", "Left PID", chassisLeftPID);
	chassisLeftPID->SetContinuous(false); chassisLeftPID->SetAbsoluteTolerance(0.2); 
        chassisLeftPID->SetOutputRange(-1.0, 1.0);
	chassisEncoderR = new Encoder(2, 3, true, Encoder::k4X);
	lw->AddSensor("Chassis", "Encoder R", chassisEncoderR);
	chassisEncoderR->SetDistancePerPulse(1.0);
        chassisEncoderR->SetPIDSourceParameter(Encoder::kDistance);
	chassisMotorR = new Talon(0);
	lw->AddActuator("Chassis", "Motor R", (Talon*) chassisMotorR);
	
	chassisRightPID = new PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ chassisEncoderR, chassisMotorR, 0.02);
	lw->AddActuator("Chassis", "Right PID", chassisRightPID);
	chassisRightPID->SetContinuous(false); chassisRightPID->SetAbsoluteTolerance(0.2); 
        chassisRightPID->SetOutputRange(-1.0, 1.0);
	hWheelMotorH = new Talon(2);
	lw->AddActuator("H Wheel", "Motor H", (Talon*) hWheelMotorH);
	
	hWheelEncoderH = new Encoder(4, 5, false, Encoder::k4X);
	lw->AddSensor("H Wheel", "Encoder H", hWheelEncoderH);
	hWheelEncoderH->SetDistancePerPulse(1.0);
        hWheelEncoderH->SetPIDSourceParameter(Encoder::kRate);
	hWheelEngage = new DoubleSolenoid(0, 0, 1);      
	lw->AddActuator("H Wheel", "Engage", hWheelEngage);
	
	intakeAcquireL = new Talon(3);
	lw->AddActuator("Intake", "Acquire L", (Talon*) intakeAcquireL);
	
	intakeAcquireR = new Talon(4);
	lw->AddActuator("Intake", "Acquire R", (Talon*) intakeAcquireR);
	
	intakeClamp = new DoubleSolenoid(0, 2, 3);      
	lw->AddActuator("Intake", "Clamp", intakeClamp);
	
	intakeToteFullIn = new DigitalInput(6);
	lw->AddSensor("Intake", "Tote Full In", intakeToteFullIn);
	
	stackerAcquireL = new Talon(5);
	lw->AddActuator("Stacker", "Acquire L", (Talon*) stackerAcquireL);
	
	stackerAcquireR = new Talon(6);
	lw->AddActuator("Stacker", "Acquire R", (Talon*) stackerAcquireR);
	
	stackerClamp = new DoubleSolenoid(0, 4, 5);      
	lw->AddActuator("Stacker", "Clamp", stackerClamp);
	
	stackerToteFullIn = new DigitalInput(7);
	lw->AddSensor("Stacker", "Tote Full In", stackerToteFullIn);
	
	stackerToteFullOut = new DigitalInput(8);
	lw->AddSensor("Stacker", "Tote Full Out", stackerToteFullOut);
	
	elevatorMove = new Talon(7);
	lw->AddActuator("Elevator", "Move", (Talon*) elevatorMove);
	
	elevatorHeightPot = new AnalogPotentiometer(0, 1.0, 0.0);
	lw->AddSensor("Elevator", "Height Pot", elevatorHeightPot);
	


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
