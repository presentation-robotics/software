// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
#include "OI.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutoCommand.h"
#include "Commands/AutoContainerSet.h"
#include "Commands/AutoStackTote.h"
#include "Commands/AutoToteSet.h"
#include "Commands/CompressorOff.h"
#include "Commands/CompressorOn.h"
#include "Commands/DriveDistance.h"
#include "Commands/DriveSpinLeft.h"
#include "Commands/DriveSpinRight.h"
#include "Commands/DriveStop.h"
#include "Commands/DriveTeleop.h"
#include "Commands/DriveTurn.h"
#include "Commands/ElevatorDown.h"
#include "Commands/ElevatorIdle.h"
#include "Commands/ElevatorMoveToPosition.h"
#include "Commands/ElevatorUp.h"
#include "Commands/HWheelDeploy.h"
#include "Commands/HWheelDrive.h"
#include "Commands/IntakeAcquireBoth.h"
#include "Commands/IntakeAcquireL.h"
#include "Commands/IntakeAcquireR.h"
#include "Commands/IntakeExpelBoth.h"
#include "Commands/IntakeExpelL.h"
#include "Commands/IntakeExpelR.h"
#include "Commands/IntakeHold.h"
#include "Commands/IntakeIdleBoth.h"
#include "Commands/IntakeIdleL.h"
#include "Commands/IntakeIdleR.h"
#include "Commands/IntakeRelease.h"
#include "Commands/IntakeSpinL.h"
#include "Commands/IntakeSpinR.h"
#include "Commands/StackerAcquire.h"
#include "Commands/StackerExpel.h"
#include "Commands/StackerHold.h"
#include "Commands/StackerIdle.h"
#include "Commands/StackerRelease.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
OI::OI() {
	printf("2135: OI init\n");
	// Process operator interface input here.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	joystick3 = new Joystick(2);
	
	operatorElevatorDown = new JoystickButton(joystick3, 12);
	operatorElevatorDown->WhileHeld(new ElevatorDown());
	operatorElevatorUp = new JoystickButton(joystick3, 11);
	operatorElevatorUp->WhileHeld(new ElevatorUp());
	operatorStackerRelease = new JoystickButton(joystick3, 10);
	operatorStackerRelease->WhileHeld(new StackerRelease());
	operatorStackerHold = new JoystickButton(joystick3, 9);
	operatorStackerHold->WhileHeld(new StackerHold());
	operatorStackerExpel = new JoystickButton(joystick3, 8);
	operatorStackerExpel->WhileHeld(new StackerExpel());
	operatorStackerAcquire = new JoystickButton(joystick3, 7);
	operatorStackerAcquire->WhileHeld(new StackerAcquire());
	operatorIntakeRelease = new JoystickButton(joystick3, 6);
	operatorIntakeRelease->WhileHeld(new IntakeRelease());
	operatorIntakeHold = new JoystickButton(joystick3, 5);
	operatorIntakeHold->WhileHeld(new IntakeHold());
	operatorIntakeExpelR = new JoystickButton(joystick3, 4);
	operatorIntakeExpelR->WhileHeld(new IntakeExpelR());
	operatorIntakeExpelL = new JoystickButton(joystick3, 3);
	operatorIntakeExpelL->WhileHeld(new IntakeExpelL());
	operatorIntakeAcquireR = new JoystickButton(joystick3, 2);
	operatorIntakeAcquireR->WhileHeld(new IntakeAcquireR());
	operatorIntakeAcquireL = new JoystickButton(joystick3, 1);
	operatorIntakeAcquireL->WhileHeld(new IntakeAcquireL());
	joystick2 = new Joystick(1);
	
	driverHWheelDeploy = new JoystickButton(joystick2, 1);
	driverHWheelDeploy->WhileHeld(new HWheelDeploy());
	joystick1 = new Joystick(0);
	
	driverTurn = new JoystickButton(joystick1, 1);
	driverTurn->WhileHeld(new DriveTurn());
	driverSpinRight = new JoystickButton(joystick1, 6);
	driverSpinRight->WhileHeld(new DriveSpinRight());
	driverSpinLeft = new JoystickButton(joystick1, 5);
	driverSpinLeft->WhileHeld(new DriveSpinLeft());
     

        // SmartDashboard Buttons
	SmartDashboard::PutData("Drive Teleop", new DriveTeleop());

	SmartDashboard::PutData("Drive Stop", new DriveStop());

	SmartDashboard::PutData("Drive Distance", new DriveDistance());

	SmartDashboard::PutData("Drive Spin Left", new DriveSpinLeft());

	SmartDashboard::PutData("Drive Spin Right", new DriveSpinRight());

	SmartDashboard::PutData("Drive Turn", new DriveTurn());

	SmartDashboard::PutData("H Wheel Deploy", new HWheelDeploy());

	SmartDashboard::PutData("H Wheel Drive", new HWheelDrive());

	SmartDashboard::PutData("Elevator Idle", new ElevatorIdle());

	SmartDashboard::PutData("Elevator Up", new ElevatorUp());

	SmartDashboard::PutData("Elevator Down", new ElevatorDown());

	SmartDashboard::PutData("Elevator Move To Position", new ElevatorMoveToPosition());

	SmartDashboard::PutData("Intake Idle L", new IntakeIdleL());

	SmartDashboard::PutData("Intake Idle R", new IntakeIdleR());

	SmartDashboard::PutData("Intake Idle Both", new IntakeIdleBoth());

	SmartDashboard::PutData("Intake Acquire L", new IntakeAcquireL());

	SmartDashboard::PutData("Intake Acquire R", new IntakeAcquireR());

	SmartDashboard::PutData("Intake Acquire Both", new IntakeAcquireBoth());

	SmartDashboard::PutData("Intake Expel L", new IntakeExpelL());

	SmartDashboard::PutData("Intake Expel R", new IntakeExpelR());

	SmartDashboard::PutData("Intake Expel Both", new IntakeExpelBoth());

	SmartDashboard::PutData("Intake Spin L", new IntakeSpinL());

	SmartDashboard::PutData("Intake Spin R", new IntakeSpinR());

	SmartDashboard::PutData("Intake Hold", new IntakeHold());

	SmartDashboard::PutData("Intake Release", new IntakeRelease());

	SmartDashboard::PutData("Stacker Idle", new StackerIdle());

	SmartDashboard::PutData("Stacker Acquire", new StackerAcquire());

	SmartDashboard::PutData("Stacker Expel", new StackerExpel());

	SmartDashboard::PutData("Stacker Hold", new StackerHold());

	SmartDashboard::PutData("Stacker Release", new StackerRelease());

	SmartDashboard::PutData("Compressor On", new CompressorOn());

	SmartDashboard::PutData("Compressor Off", new CompressorOff());

	SmartDashboard::PutData("Auto Command", new AutoCommand());

	SmartDashboard::PutData("Auto Container Set", new AutoContainerSet());

	SmartDashboard::PutData("Auto Tote Set", new AutoToteSet());

	SmartDashboard::PutData("Auto Stack Tote", new AutoStackTote());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

Joystick* OI::getJoystick3() {
	return joystick3;
}

Joystick* OI::getJoystick2() {
	return joystick2;
}

Joystick* OI::getJoystick1() {
	return joystick1;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
