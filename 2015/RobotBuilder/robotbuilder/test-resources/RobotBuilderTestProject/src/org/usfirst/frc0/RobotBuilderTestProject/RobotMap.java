// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.RobotBuilderTestProject;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.smartdashboard.*;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainLeftVictor;
    public static SpeedController driveTrainRightVictor;
    public static RobotDrive driveTrainRobotDrive;
    public static Gyro driveTrainGyro;
    public static SpeedController armMotor;
    public static Encoder armEncoder;
    public static PIDController armPIDController;
    public static DigitalInput armLimit;
    public static SpeedController wristMotor;
    public static AnalogPotentiometer wristPot;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftVictor = new Victor(0);
        LiveWindow.addActuator("Drive Train", "Left Victor", (Victor) driveTrainLeftVictor);
        
        driveTrainRightVictor = new Victor(1);
        LiveWindow.addActuator("Drive Train", "Right Victor", (Victor) driveTrainRightVictor);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainLeftVictor, driveTrainRightVictor);
        
        driveTrainRobotDrive.setSafetyEnabled(false);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.25);
        driveTrainRobotDrive.setMaxOutput(1.0);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);        

        driveTrainGyro = new Gyro(0);
        LiveWindow.addSensor("Drive Train", "Gyro", driveTrainGyro);
        driveTrainGyro.setSensitivity(2.33);
        armMotor = new Jaguar(2);
        LiveWindow.addActuator("Arm", "Motor", (Jaguar) armMotor);
        
        armEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Arm", "Encoder", armEncoder);
        armEncoder.setDistancePerPulse(24.0);
        armEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        armPIDController = new PIDController(2.0, 1.0, -1.0, 0.0, armEncoder, armMotor, 0.02);
        LiveWindow.addActuator("Arm", "PID Controller", armPIDController);
        armPIDController.setContinuous(true); armPIDController.setAbsoluteTolerance(0.2); 
        armPIDController.setInputRange(0.0, 5.0);
        armPIDController.setOutputRange(-1.0, 1.0);        

        armLimit = new DigitalInput(2);
        LiveWindow.addSensor("Arm", "Limit", armLimit);
        
        wristMotor = new Jaguar(3);
        LiveWindow.addActuator("Wrist", "Motor", (Jaguar) wristMotor);
        
        wristPot = new AnalogPotentiometer(1, 1.0, 0.0);
        LiveWindow.addSensor("Wrist", "Pot", wristPot);
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
