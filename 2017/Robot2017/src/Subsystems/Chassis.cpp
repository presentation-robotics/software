// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Chassis.h"
#include "../RobotMap.h"
#include "../Commands/DriveTeleop.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Chassis::Chassis() : Subsystem("Chassis") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    motorL1 = RobotMap::chassisMotorL1;
    motorR3 = RobotMap::chassisMotorR3;
    robotDrive = RobotMap::chassisRobotDrive;
    motorL2 = RobotMap::chassisMotorL2;
    motorR4 = RobotMap::chassisMotorR4;
    gyro = RobotMap::chassisGyro;
    shifter = RobotMap::chassisShifter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    printf("2135: Chassis constructor\n");

    //	TODO: Second left and right motors must be slaved to first ones
    motorL1->ConfigNeutralMode(CANSpeedController::NeutralMode::kNeutralMode_Coast);
    motorL2->ConfigNeutralMode(CANSpeedController::NeutralMode::kNeutralMode_Coast);
    motorR3->ConfigNeutralMode(CANSpeedController::NeutralMode::kNeutralMode_Coast);
    motorR4->ConfigNeutralMode(CANSpeedController::NeutralMode::kNeutralMode_Coast);

    // Make second Talon SRX controller on each side of drivetrain follow the main Talon SRX
    motorL2->SetControlMode(CANSpeedController::kFollower);
    motorL2->Set(1);
    motorR4->SetControlMode(CANSpeedController::kFollower);
    motorR4->Set(3);

    //	TODO: Set voltage ramp rate to control how fast motors spin up in auton
    motorL1->SetVoltageRampRate(12.0);
    motorL2->SetVoltageRampRate(12.0);
    motorR3->SetVoltageRampRate(12.0);
    motorR4->SetVoltageRampRate(12.0);
//    motorL1->ConfigMaxOutputVoltage(12.0);
//    motorL2->ConfigMaxOutputVoltage(12.0);
//    motorR3->ConfigMaxOutputVoltage(12.0);
//    motorR4->ConfigMaxOutputVoltage(12.0);

    gyro->Calibrate();

	//	TODO: Initialize drive direction
    m_driveDirection = 1.0;

	//	TODO: Initialize drive scaling factor
    m_scaled = false;
    m_driveScalingFactor = 1.0;

    //	TODO: Initialize power setting used for spin turns
    m_driveSpinSetting = 0.4;
}

void Chassis::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new DriveTeleop());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Chassis::Initialize(Preferences *prefs)
{

}

void Chassis::UpdateSmartDashboardValues(void)
{

}

void Chassis::MoveToggleBrakeMode(void)
{
	if (m_brakeMode == true) {
		motorL1->ConfigNeutralMode(CANSpeedController::NeutralMode::kNeutralMode_Coast);
		motorL2->ConfigNeutralMode(CANSpeedController::NeutralMode::kNeutralMode_Coast);
		motorR3->ConfigNeutralMode(CANSpeedController::NeutralMode::kNeutralMode_Coast);
		motorR4->ConfigNeutralMode(CANSpeedController::NeutralMode::kNeutralMode_Coast);
	}

	else {
		motorL1->ConfigNeutralMode(CANSpeedController::NeutralMode::kNeutralMode_Brake);
		motorL2->ConfigNeutralMode(CANSpeedController::NeutralMode::kNeutralMode_Brake);
		motorR3->ConfigNeutralMode(CANSpeedController::NeutralMode::kNeutralMode_Brake);
		motorR4->ConfigNeutralMode(CANSpeedController::NeutralMode::kNeutralMode_Brake);
	}

	m_brakeMode = !m_brakeMode;
	SmartDashboard::PutBoolean("BrakeMode", m_brakeMode);
}

void Chassis::MoveUsingMotorOutputs(double motorInputLeft, double motorInputRight)
{
	robotDrive->SetLeftRightMotorOutputs(motorInputLeft, motorInputRight);

	// TODO: Update the encoders
}

void Chassis::MoveDriveDistance(double inches)
{

}

void Chassis::MoveDriveHeadingDistance(double inches, double angle)
{

}

void Chassis::ShiftSpeed(bool lowGear)
{
	if (lowGear) {
		shifter->Set(shifter->kForward);
	}
	else {
		shifter->Set(shifter->kReverse);
	}
}

void Chassis::MoveWithJoystick(std::shared_ptr<Joystick> joystick)
{
	double xValue;
	double yValue;

	xValue = joystick->GetX() * -1;
	yValue = joystick->GetY() * m_driveDirection;

	if (m_scaled) {
		xValue = xValue * m_driveScalingFactor;
		yValue = yValue * m_driveScalingFactor;
	}

	robotDrive->ArcadeDrive( xValue, yValue, true );
}

void Chassis::MoveStop(void)
{
	robotDrive->SetLeftRightMotorOutputs( 0.0, 0.0 );
}

void Chassis::MoveSpin(bool spinLeft)
{
	if (spinLeft)
		robotDrive->SetLeftRightMotorOutputs( -m_driveSpinSetting, m_driveSpinSetting );
	else
		robotDrive->SetLeftRightMotorOutputs( m_driveSpinSetting, -m_driveSpinSetting );
}

//	Set drive direction to be opposite relative to robot

void Chassis::MoveInvertDriveDirection(void)
{
	m_driveDirection = -m_driveDirection;
	SmartDashboard::PutNumber("Drive Invert", m_driveDirection);
}

//	Set scaling factor on drive speed

void Chassis::MoveScaleMaxSpeed(bool scaled)
{
	m_scaled = scaled;
	SmartDashboard::PutBoolean("Drive Scaled", m_scaled);
}

//	Set voltage ramp rate to control motor spin up during auton

void Chassis::MoveSetVoltageRamp(double voltageRampRate)
{
	motorL1->SetVoltageRampRate(voltageRampRate);
	motorR3->SetVoltageRampRate(voltageRampRate);
}

void Chassis::ResetEncoder(void)
{

}

double Chassis::ReadEncoder(void)
{

}

void Chassis::ResetGyro(void)
{
	gyro->Reset();
}

double Chassis::ReadGyro(void)
{
	return gyro->GetAngle();
}
