// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "Climber.h"
#include "../RobotMap.h"
#include "../Commands/ClimberMotorControl.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Climber::Climber() : Subsystem("Climber") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    motor18 = RobotMap::climberMotor18;
    motor19 = RobotMap::climberMotor19;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    std::printf("2135: Climber Constructor\n");
    m_lowSpeed = false;
}

void Climber::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new ClimberMotorControl(0));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Climber::Initialize(frc::Preferences *prefs)
{
	// Initialize SmartDashboard values - if any
	// TODO: CTRE docs say inverted states should be set first
	std::printf("2135: Climber Initialize\n");
    motor18->SetNeutralMode(NeutralMode::Brake);
	motor18->Set(ControlMode::PercentOutput, 0.0);

    motor19->SetNeutralMode(NeutralMode::Brake);
	motor19->Set(ControlMode::Follower, 18.0);
	motor19->SetInverted(true);
}

void Climber::UpdateSmartDashboardValues(void)
{

}

void Climber::SetMotorSpeed(int speed)
{
	double output = 0.0;

	switch (speed)
	{
	default:
	case CLIMBER_STOP:
		output = 0.0;
		break;
	case CLIMBER_FORWARD:
		output = (m_lowSpeed) ? CLMB_LOW_SPEED_D : CLMB_SPEED_D;
		break;
	case CLIMBER_REVERSE:
		output = (m_lowSpeed) ? -CLMB_LOW_SPEED_D : -CLMB_SPEED_D;
		break;
	}
	motor18->Set(ControlMode::PercentOutput, output);
}

void Climber::SetMotorLowSpeed(bool lowSpeed)
{
	m_lowSpeed = lowSpeed;
}
