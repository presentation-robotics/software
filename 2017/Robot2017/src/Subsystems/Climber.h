// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#ifndef CLIMBER_H
#define CLIMBER_H
#include "Commands/Subsystem.h"
#include "WPILib.h"

#include "ctre/phoenix/MotorControl/CAN/TalonSRX.h"
using namespace CTRE::MotorControl;

/**
 *
 *
 * @author ExampleAuthor
 */
class Climber: public Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<CAN::TalonSRX> motor18;
	std::shared_ptr<CAN::TalonSRX> motor19;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	const double climberSpeed = -1.0;		 // Default motor speed
public:
	Climber();
	void InitDefaultCommand();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	enum { CLIMBER_STOP = 0, CLIMBER_FORWARD = 1, CLIMBER_REVERSE = -1};
	enum { CLIMBER_STOP_LOW = 0, CLIMBER_FORWARD_LOW = 1, CLIMBER_REVERSE_LOW = -1};

	bool m_lowSpeed;

	// Put added public methods here in same order as in file
	void Initialize(frc::Preferences *prefs);
	void UpdateSmartDashboardValues(void);
	void SetMotorSpeed(int speed);
	void SetMotorLowSpeed(bool lowSpeed);
};

#endif
