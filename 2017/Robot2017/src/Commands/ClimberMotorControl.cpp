// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ClimberMotorControl.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

ClimberMotorControl::ClimberMotorControl(int direction, double speed): Command() {
    m_direction = direction;
    m_speed = speed;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::climber.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void ClimberMotorControl::Initialize() {
	const char *strName;

	//	TODO: When we put in a ratchet--only allow climbing correct direction in software
	if (m_direction == Robot::climber->CLIMBER_FORWARD)
		strName = "Climb";
	else if (m_direction == Robot::climber->CLIMBER_REVERSE)
		strName = "Descend";
	else
		strName = "Off";
	printf("2135: Climber Motor Control %s - Start\n", strName);
}

// Called repeatedly when this Command is scheduled to run
void ClimberMotorControl::Execute() {
	Robot::climber->SetMotorSpeed(m_direction, m_speed);
}

// Make this return true when this Command no longer needs to run execute()
bool ClimberMotorControl::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void ClimberMotorControl::End() {
	printf("2135: Climber Motor Control - Ended\n");
	Robot::climber->SetMotorSpeed(Robot::climber->CLIMBER_STOP, 0.0);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ClimberMotorControl::Interrupted() {
	printf("2135: Climber Motor Control - Interrupted\n");
	Robot::climber->SetMotorSpeed(Robot::climber->CLIMBER_STOP, 0.0);
}
