// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"
#include "frc2135/VisionLoop.h"
#include "Commands/AutonDefault.h"
#include "Commands/AutonPos123Move.h"
#include "Commands/AutonPos1DeliverGear.h"
#include "Commands/AutonPos2DeliverGear.h"
#include "Commands/AutonPos3DeliverGear.h"
#include "Commands/AutonPos2VisionDeliverGear.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<Chassis> Robot::chassis;
std::shared_ptr<Intake> Robot::intake;
std::shared_ptr<Agitator> Robot::agitator;
std::shared_ptr<Shooter> Robot::shooter;
std::shared_ptr<Delivery> Robot::delivery;
std::shared_ptr<Climber> Robot::climber;
std::shared_ptr<Pneumatics> Robot::pneumatics;
std::shared_ptr<Power> Robot::power;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

// Robot initialization - main startup sequence

void Robot::RobotInit() {

	//	Initialize all our devices and their IDs

	RobotMap::init();

	//	Create all of our subsystem objects

	// TODO: Try to re-enable power distribution board
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    chassis.reset(new Chassis());
    intake.reset(new Intake());
    agitator.reset(new Agitator());
    shooter.reset(new Shooter());
    delivery.reset(new Delivery());
    climber.reset(new Climber());
    pneumatics.reset(new Pneumatics());
//    power.reset(new Power());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

	m_faultsCleared = false;

	prefs = frc::Preferences::GetInstance();

//	std::printf("2135: Main Thread ID %d\n", RobotBase::GetThreadId());
	std::thread m_vThread(VisionThread);
	m_vThread.detach();

	SmartDashboardStartChooser(); //Moved from DisabledInit
	std::printf("2135: Auton Chooser Init\n");

	std::printf("2135: RobotInit - Finished\n");
}

/**
 * This function is called when the disabled mode is entered (startup or disable button)
 * You can use it to reset subsystems before shutting down.
 */

//	Disabled mode handlers

void Robot::DisabledInit(){
	m_faultsCleared = false;

//	SmartDashboardStartChooser();
// Was taken out because it kept calling other auton commands on loop when it was rebuilt. We have moved this
// command to RobotInit.

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();

	SmartDashboardUpdate(smartdashDisabledRate);

	static int ticks_per_print = 0;
	if (ticks_per_print++ % 50 == 0) {
		//std::printf("2135: DisabledPeriodic %d\n", ticks_per_print / 50); 	// Testing only
	}

	// If RoboRIO User button is pressed, dump all CAN faults
	if (RobotController::GetUserButton() && !m_faultsCleared) {
		m_faultsCleared = true;
		RobotFaultDump();
	}
}

//	Autonomous mode handlers

void Robot::AutonomousInit() {
	RobotModeInitialize();

	autonomousCommand.reset(chooser.GetSelected());
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();

	SmartDashboardUpdate(smartdashAutonRate);
}

//	Teleop mode handlers

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Cancel();

	RobotModeInitialize();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();

	SmartDashboardUpdate(smartdashTeleopRate);
}

// Test mode (LiveWindow) handlers

void Robot::TestPeriodic() {
//	lw->Run();

	SmartDashboardUpdate(smartdashLiveRate);
}

///////////////////////////////////////////////////////////////////////////////////////////////////

//	Robot mode change - initialization of all subsystems

void Robot::RobotModeInitialize() {
	prefs = frc::Preferences::GetInstance();

	// Initialize SmartDashboard preferences
	chassis->Initialize(prefs);
	agitator->Initialize(prefs);
	climber->Initialize(prefs);
	delivery->Initialize(prefs);
	intake->Initialize(prefs);
	pneumatics->Initialize(prefs);
	shooter->Initialize(prefs);
}

//	SmartDashboard - Autonomous chooser initialization

void Robot::SmartDashboardStartChooser() {
	chooser.AddDefault("Auton Default", new AutonDefault());
	chooser.AddObject("Pos 123 Move", new AutonPos123Move());
	chooser.AddObject("Pos 1 Gear", new AutonPos1DeliverGear());
	chooser.AddObject("Pos 2 Gear", new AutonPos2DeliverGear());
	chooser.AddObject("Pos 3 Gear", new AutonPos3DeliverGear());
	chooser.AddObject("Pos 2 Gear Vision", new AutonPos2VisionDeliverGear());
	frc::SmartDashboard::PutData("Auto Modes", &chooser);
}

//	SmartDashboard - Data refresh routines

void Robot::SmartDashboardUpdate(int rate) {
	static int m_dashboardUpdate = 0;

	//	Print smart dashboard values only occasionally to reduce resource requirements
	if (m_dashboardUpdate++ > rate)
	{
		m_dashboardUpdate = 0;

		// Only chassis routines updated now
		Robot::chassis->UpdateSmartDashboardValues();
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////

//	Fault handling utilities

void Robot::RobotFaultDump(void) {
	std::printf("2135: %s --------------\n", "TALON SRX FAULTS");
	RobotFaultDumpTalonSRX("chassisMotorL1", RobotMap::chassisMotorL1);
	RobotFaultDumpTalonSRX("chassisMotorL2", RobotMap::chassisMotorL2);
	RobotFaultDumpTalonSRX("chassisMotorR3", RobotMap::chassisMotorR3);
	RobotFaultDumpTalonSRX("chassisMotorR4", RobotMap::chassisMotorR4);
	RobotFaultDumpTalonSRX("intakeMotor8", RobotMap::intakeMotor8);
	RobotFaultDumpTalonSRX("intakeMotor9", RobotMap::intakeMotor9);
	RobotFaultDumpTalonSRX("agitatorMotor12", RobotMap::agitatorMotor12);
	RobotFaultDumpTalonSRX("shooterMotor14", RobotMap::shooterMotor14);
	RobotFaultDumpTalonSRX("climberMotor18", RobotMap::climberMotor18);
	RobotFaultDumpTalonSRX("climberMotor19", RobotMap::climberMotor19);

	std::printf("2135: %s --------------\n", "PCM FAULTS");
	if (RobotMap::pneumaticsCompressor->GetCompressorCurrentTooHighStickyFault())
		std::printf("\tCurrentTooHighFault\n");
	if (RobotMap::pneumaticsCompressor->GetCompressorNotConnectedFault())
		std::printf("\tCompressorNotConnectedFault\n");
	if (RobotMap::pneumaticsCompressor->GetCompressorShortedFault())
		std::printf("\tCompressorShortedFault\n");
	RobotMap::pneumaticsCompressor->ClearAllPCMStickyFaults();

	std::printf("2135: %s --------------\n", "PDP FAULTS");
	// TODO: Check and fix faults
//	RobotMap::powerPDP->ClearStickyFaults();
}

void Robot::RobotFaultDumpTalonSRX(const char *talonName, std::shared_ptr<WPI_TalonSRX> talonPtr) {

	Faults			faults;
	StickyFaults	stickyFaults;

	talonPtr->GetFaults(faults);
	talonPtr->GetStickyFaults(stickyFaults);
	talonPtr->ClearStickyFaults(100);

	std::printf("2135: %s --------------\n", talonName);

	if (faults.HasAnyFault())
		std::printf("At Least one fault below\n");
	if (faults.ForwardLimitSwitch)
		std::printf("\tForwardLimitSwitch\n");
	if (faults.ForwardSoftLimit)
		std::printf("\tForwardSoftLimit\n");
	if (faults.HardwareESDReset)
		std::printf("\tHardwareESDReset\n");
	if (faults.HardwareFailure)
		std::printf("\tHardwareFailure\n");
	if (faults.RemoteLossOfSignal)
		std::printf("\tRemoteLossOfSignal\n");
	if (faults.ResetDuringEn)
		std::printf("\tResetDuringEn\n");
	if (faults.ReverseLimitSwitch)
		std::printf("\tReverseLimitSwitch\n");
	if (faults.ReverseSoftLimit)
		std::printf("\tReverseSoftLimit\n");
	if  (faults.SensorOutOfPhase)
		std::printf("\tSensorOutOfPhase\n");
	if (faults.SensorOverflow)
		std::printf("\tSensorOverflow\n");
	if (faults.UnderVoltage)
		std::printf("\tUnderVoltage\n");

	if (stickyFaults.HasAnyFault())
		std::printf("At Least one STICKY fault below\n");
	if (stickyFaults.ForwardLimitSwitch)
		std::printf("\tForwardLimitSwitch\n");
	if (stickyFaults.ForwardSoftLimit)
		std::printf("\tForwardSoftLimit\n");
	if (stickyFaults.HardwareESDReset)
		std::printf("\tHardwareESDReset\n");
//	if (stickyFaults.HardwareFailure)
//		std::printf("\tHardwareFailure\n");
	if (stickyFaults.RemoteLossOfSignal)
		std::printf("\tRemoteLossOfSignal\n");
	if (stickyFaults.ResetDuringEn)
		std::printf("\tResetDuringEn\n");
	if (stickyFaults.ReverseLimitSwitch)
		std::printf("\tReverseLimitSwitch\n");
	if (stickyFaults.ReverseSoftLimit)
		std::printf("\tReverseSoftLimit\n");
	if  (stickyFaults.SensorOutOfPhase)
		std::printf("\tSensorOutOfPhase\n");
	if (stickyFaults.SensorOverflow)
		std::printf("\tSensorOverflow\n");
	if (stickyFaults.UnderVoltage)
		std::printf("\tUnderVoltage\n");

}

///////////////////////////////////////////////////////////////////////////////////////////////////

//	Preference handling utilities

double Robot::LoadPreferencesVariable(std::string name, double defaultValue) {
	double value;
	Preferences *prefs;

	prefs = frc::Preferences::GetInstance();

	if (prefs->ContainsKey(name)) {
		value = prefs->GetDouble(name, defaultValue);
		std::printf("2135: PREF    %-30s : %6.3f\n", name.c_str(), value);
	}
	else {
		value = defaultValue;
		std::printf("2135: WARNING %-30s not found\n", name.c_str());
	}

	return value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////

// Vision Thread to call into our Vision processing loop

void VisionThread() {
	// Thread checking
	std::printf("2135: ----- VISION THREAD RUNNING -----\n");
//	std::printf("2135: Vision Thread ID %d\n", std::this_thread::get_id());
	if (std::this_thread::get_id() == RobotBase::GetThreadId()) {
		std::printf("2135: ERROR: Vision Loop cannot be called from the main robot thread\n");
		return;
	}

	try {
		// Instantiate the vision loop and call it
		VisionLoop *vision = new VisionLoop;
		vision->Run();

		// Should never get here - if it does then clean up
		delete vision;
	}
	catch (...) {	// Error detected, loop in a sleep mode (return seems to reboot robot)
		while(1) {
			std::printf("2135: Vision Thread terminated due to exception\n");
			std::this_thread::sleep_for(std::chrono::seconds(10));
		}
	}
}

START_ROBOT_CLASS(Robot);
