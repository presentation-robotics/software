// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "subsystems/Climber.h"
#include <frc/smartdashboard/SmartDashboard.h>

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

Climber::Climber(){
    SetName("Climber");
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

 
 

    AddChild("ClimbPosition", &m_climbPosition);
 

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

     // Validate and initialize Talon SRX controller
    m_talonValidCL14 = frc2135::TalonUtils::TalonCheck(m_motorCL14, "CL", "14");

    frc2135::RobotConfig *config = frc2135::RobotConfig::GetInstance();
    config->GetValueAsDouble("CL_ClimbSpeed", m_climbSpeed, 1.0);

    if (m_talonValidCL14)
    {
        m_motorCL14.Set(ControlMode::PercentOutput, 0.0);
        m_motorCL14.SetNeutralMode(NeutralMode::Brake);
        m_motorCL14.ConfigVoltageCompSaturation(12.0, kCANTimeout);
        m_motorCL14.EnableVoltageCompensation(true);
    }

    // Check if solenoids are functional or blacklisted
    std::printf("2135: CL Climber Deployer FWD Solenoid is %s\n",
        (m_climbPosition.IsFwdSolenoidBlackListed()) ? "BLACKLISTED - ERROR" : "OK");

    std::printf("2135: CL Climber Deployer REV Solenoid is %s\n",
        (m_climbPosition.IsRevSolenoidBlackListed()) ? "BLACKLISTED - ERROR" : "OK");
}

void Climber::Periodic() {
    // Put code here to be run every loop

    static int  periodicInterval = 0;

    // Put code here to be run every 20 ms loop

    // Only update indicators every 100 ms to cut down on network traffic
    if (periodicInterval++ % 5 == 0)
    {
        double outputCL14 = 0.0;

        if (m_talonValidCL14)
            outputCL14 = m_motorCL14.GetMotorOutputPercent();
        frc::SmartDashboard::PutNumber("CL_Output_CL14", outputCL14);

        if (m_climberDebug > 0)
        {
            double currentCL14;

            currentCL14 = (m_talonValidCL14) ? m_motorCL14.GetOutputCurrent() : 0.0;
            frc::SmartDashboard::PutNumber("CL_Current_CL14", currentCL14);
        }
    }

}

void Climber::SimulationPeriodic() {
    // This method will be called once per scheduler run when in simulation

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Climber::Initialize(void)
{
    std::printf("2135: CL Init\n");
    // Motor off
    if (m_talonValidCL14)
    {
        m_motorCL14.Set(ControlMode::PercentOutput, 0.0);

        m_motorCL14.ConfigSelectedFeedbackSensor(FeedbackDevice::CTRE_MagEncoder_Relative, kCANTimeout);
        m_motorCL14.SetSensorPhase(false);
        m_motorCL14.SetSelectedSensorPosition(0, kCANTimeout);
    }
}

//    Dump all Talon faults
void Climber::FaultDump(void)
{
    frc2135::TalonUtils::TalonFaultDump("CL 14", m_motorCL14);
}

void Climber::SetClimberMotorOutput(int climberDir)
{
    double outputCL = 0.0;         // Default: off

    switch (climberDir)
    {
        default:
        case CLIMBERDIR_STOP:
            outputCL = 0.0;
            break;
        case CLIMBERDIR_UP:
            outputCL = m_climbSpeed;
            break;
        case CLIMBERDIR_DOWN:
            outputCL = -m_climbSpeed;
            break;
    }

    if (m_talonValidCL14)
        m_motorCL14.Set(ControlMode::PercentOutput, outputCL);
}

void Climber::DeployClimber(bool state)
{
    // If state is true, sets climber deploy forward, else reverse.
    m_climbPosition.Set( (state) ? m_climbPosition.kForward : m_climbPosition.kReverse);
}
