// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#pragma once
#include <frc/controller/SimpleMotorFeedforward.h>
#include <units/length.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "ctre/Phoenix.h"

#include <frc2/command/SubsystemBase.h>

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

using namespace units::length;

/**
 *
 *
 * @author ExampleAuthor
 */
class Shooter : public frc2::SubsystemBase
{
private:
    // It's desirable that everything possible is private except
    // for methods that implement subsystem capabilities
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    WPI_TalonFX m_motorSH10{ 10 };
    WPI_TalonFX m_motorSH11{ 11 };

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    const int m_shooterDebug = 1;            // DEBUG flag to disable/enable extra logging calls
    const int kPidIndex = 0;                 // PID slot index for sensors
    const double kFalconEncoderCPR = 2048;   // CPR is 2048 from Falcon 500 Manual
    const double kFlywheelGearRatio = 1 / 1; // No reduction 1:1
    const double kFeederGearRatio = 2 / 3;   // Reduction of 1/1.5
    const double kFlywheelCPR = kFalconEncoderCPR * kFlywheelGearRatio;
    const double kFeederCPR = kFalconEncoderCPR * kFeederGearRatio;
    const int kCANTimeout = 30; // CAN timeout in msec to wait for response

    // Declare module variables
    bool m_talonValidSH10; // Health indicator for shooter talon 10
    bool m_talonValidSH11; // Health indicator for shooter talon 11

    //Configuration file parameters
    double m_flywheelRPM; // Target output

    double m_pidKf;           // Shooter PID force constant
    double m_pidKp;           // Shooter PID proportional constant
    double m_pidKi;           // Shooter PID integral constant
    double m_pidKd;           // Shooter PID derivative constant
    double m_neutralDeadband; // Shooter PID neutral deadband in percent

    double m_FeedertargetRPM;
    double m_FeedertargetVelocityRPM;
    double m_FeedercurVelocityRPM; // Current shooter velocity in RPM

    double m_FlywheeltargetRPM;
    double m_FlywheeltargetVelocityRPM;
    double m_FlywheelcurVelocityRPM;

    int m_shooterState; // Current shooter speed level

    // Conversion functions between RPM and Output and CTRE Native Units / 100ms
    double FlywheelRPMToNative(double rpm);
    double NativeToFlywheelRPM(double native);
    double NativeToFeederRPM(double native);

    frc::SimpleMotorFeedforward<units::meters> m_feedforward; // Shooter feedforward calculator

public:
    Shooter();

    void Periodic() override;
    void SimulationPeriodic() override;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    typedef enum shooterSpeed_e
    {
        SHOOTERSPEED_STOP = 0,    // Stop shooter
        SHOOTERSPEED_FORWARD = 1, // Shooter velocity
        SHOOTERSPEED_SMARTDASH = 2
    } shooterSpeed_e;

    void Initialize(void);
    void FaultDump(void);

    void SetShooterSpeed(int state);
    void IndexerDeploy(bool state);
    void MotorRun();
    void Aiming();
    void AtDesiredRPM();
};
