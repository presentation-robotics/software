// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include <frc/AddressableLED.h>
#include <frc/smartdashboard/SendableChooser.h>
#include <spdlog/fmt/ostr.h>
#include <spdlog/spdlog.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "subsystems/LED.h"

#include <frc/smartdashboard/SmartDashboard.h>

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

LED::LED()
{
    SetName("LED");
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SetSubsystem("LED");

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void LED::Periodic()
{
    // Put code here to be run every loop
}

void LED::SimulationPeriodic()
{
    // This method will be called once per scheduler run when in simulation
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

// Put methods for controlling this subsystem
// here. Call these from Commands.

void LED::Initialize()
{
    spdlog::info("LED Init");

    //Default to a length of 60, start empty output
    //Length is expensive to set, so only set it once, then just update data
    m_led.SetLength(kLEDStringLength);
    m_led.SetData(m_ledBuffer);
    m_led.Start();

    // Add options for colors in SmartDashboard
    m_ledChooser.AddOption("LED_Off", LEDCOLOR_OFF);
    m_ledChooser.AddOption("LED_On", LEDCOLOR_ON);

    frc::SmartDashboard::PutData("LED_Color", &m_ledChooser);
}

// Send RGB values to change color of each LED in string
void LED::SendRGBToString(int rgbRed, int rgbGreen, int rgbBlue)
{
    for (int i = 0; i < kLEDStringLength; i++)
    {
        m_ledBuffer[i].SetRGB(rgbRed, rgbGreen, rgbBlue);
    }

    m_led.SetData(m_ledBuffer);
}

// Set color of LED string
void LED::SetColor(int color)
{
    const char *strName;

    switch (color)
    {
        default:
        case LEDCOLOR_OFF:
            strName = "OFF";
            SendRGBToString(0, 0, 0); //black
            break;
        case LEDCOLOR_ON:
            strName = "ON";
            SendRGBToString(255, 255, 255); //white
            break;
    }

    if (m_previousColor != color)
    {
        spdlog::info("LED Color Set to {}", strName);
        m_previousColor = color;
    }
}
