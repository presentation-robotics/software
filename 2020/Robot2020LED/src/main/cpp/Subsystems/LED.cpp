// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include <Subsystems/LED.h>
#include <frc/smartdashboard/SmartDashboard.h>
#include <frc/Commands/Scheduler.h>


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

LED::LED() : frc::Subsystem("LED") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

}



void LED::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void LED::Periodic() {
    // Put code here to be run every loop

	SetColor(chooser.GetSelected());

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void LED::LEDInit() {
    //Default to a length of 60, start empty output
    //Length is expensive to set, so only set it once, then just update data
    m_led.SetLength(kLength);
    m_led.SetData(m_ledBuffer);
    m_led.Start();

	chooser.AddOption("LED_White", LED_SetWhite);
    chooser.AddOption("LED_Red", LED_SetRed);
    chooser.AddOption("LED_Orange", LED_SetOrange);
    chooser.AddOption("LED_Yellow", LED_SetYellow);
    chooser.AddOption("LED_Green", LED_SetGreen);
    chooser.AddOption("LED_Blue", LED_SetBlue);
    chooser.AddOption("LED_Purple", LED_SetPurple);

    frc::SmartDashboard::PutData("LED Color", &chooser);

}

/*
void LED::PowerCellDetect(bool powerCellOn) {
    if (powerCellOn) {
        //if green, turn LED on
        m_led.Start();
    }
    else {
        // switch LED off
        m_led.Stop();
    }
}*/

// Take RGB value to change color of LED
void LED::LEDSetRGB(int rgbRed, int rgbGreen, int rgbBlue) {
    for (int i = 0; i < kLength; i++) {
        m_ledBuffer[i].SetRGB(rgbRed, rgbGreen, rgbBlue);
    }

    m_led.SetData(m_ledBuffer);
}

// Set color of LED
void LED::SetColor (int color) {
    const char *strName;

    switch(color)
    {
    default:
    case LED_SetWhite:
        strName = "WHITE";
        LEDSetRGB(255, 255, 255); //white
        break;   
    case LED_SetRed:
        strName = "RED";
        LEDSetRGB(255, 0, 0); //red
        break;
    case LED_SetOrange:
        strName = "ORANGE";
        LEDSetRGB(255, 165, 0); //orange
        break;
    case LED_SetYellow:
        strName = "YELLOW";
        LEDSetRGB(255, 255, 0); //yellow
        break;
    case LED_SetGreen:
        strName = "GREEN";
        LEDSetRGB(0, 255, 0); //green
        break;
    case LED_SetBlue:
        strName = "BLUE";
        LEDSetRGB(0, 0, 255); //blue
        break;
    case LED_SetPurple: // For Rithu
        strName = "PURPLE";
        LEDSetRGB(102, 0, 102); //purple
        break;
    }
}