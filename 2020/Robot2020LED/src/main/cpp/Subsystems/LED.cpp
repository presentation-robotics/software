// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include <Subsystems/LED.h>
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

LED::LED() : frc::Subsystem("LED") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

}



void LED::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void LED::Periodic() {
    // Put code here to be run every loop

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void LED::LEDInit() {
    //Default to a length of 60, start empty output
    //Length is expensive to set, so only set it once, then just update data
    m_led.SetLength(kLength);
    m_led.SetData(m_ledBuffer);
    m_led.Start();
}

void LED::PowerCellDetect(bool powerCellOn) {
    if (powerCellOn) {
        //if green, turn LED on
        m_led.Start();
    }
    else {
        // switch LED off
        m_led.Stop();
    }
}

// Changing Colors of LED
// Can be used later when each photosensor detects a powercell 
// Change to switch statement
void LED::LEDSetRed() {
    for (int i = 0; i < kLength; i++) {
        m_ledBuffer[i].SetRGB(255, 0, 0); //red
    }

    m_led.SetData(m_ledBuffer);
}

void LED::LEDSetOrange() {
    for (int i = 0; i < kLength; i++) {
        m_ledBuffer[i].SetRGB(255, 165, 0); //orange
    }

    m_led.SetData(m_ledBuffer);
}

void LED::LEDSetYellow() {
    for (int i = 0; i < kLength; i++) {
        m_ledBuffer[i].SetRGB(255, 255, 0); //yellow
    }

    m_led.SetData(m_ledBuffer);
}

void LED::LEDSetGreen() {
    for (int i = 0; i < kLength; i++) {
        m_ledBuffer[i].SetRGB(0, 255, 0); //green
    }

    m_led.SetData(m_ledBuffer);
}

void LED::LEDSetBlue() {
    for (int i = 0; i < kLength; i++) {
        m_ledBuffer[i].SetRGB(0, 0, 255); //blue
    }

    m_led.SetData(m_ledBuffer);
}
