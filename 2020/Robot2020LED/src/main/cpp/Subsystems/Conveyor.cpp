// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include <frc/smartdashboard/SmartDashboard.h>
#include <Subsystems/Conveyor.h>
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Conveyor::Conveyor() : frc::Subsystem("Conveyor") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
motorCV8.reset(new WPI_TalonSRX(8));


cVPhotosensor.reset(new frc::DigitalInput(0));
AddChild("CV Photosensor", cVPhotosensor);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Validate Talon SRX controllers, initialize and display firmware versions
    m_talonValidCV8 = frc2135::TalonUtils::TalonCheck(motorCV8, "CV", "CV8"); 

    // Initialize Variables
    frc2135::RobotConfig* config = frc2135::RobotConfig::GetInstance();
    config->GetValueAsDouble("CV_AcquireSpeed", m_acquireSpeed, 0.75);
    config->GetValueAsDouble("CV_HoldSpeed", m_holdSpeed, 0.1);
    config->GetValueAsDouble("CV_ExpelSpeed", m_expelSpeed, -0.75);

    // Set motor directions
    // Turn on Brake mode (not coast)
    // Initialize modes and set power to off
    // Set motor peak outputs - acquire is fastest speed
    if (m_talonValidCV8) {
        motorCV8->SetInverted(false);
        motorCV8->SetNeutralMode(NeutralMode::Brake);
        motorCV8->Set(ControlMode::PercentOutput, 0.0);
        motorCV8->ConfigPeakOutputForward(m_acquireSpeed, m_timeout);
        motorCV8->ConfigPeakOutputReverse(-m_acquireSpeed, m_timeout);
    }
}

void Conveyor::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Conveyor::Periodic() {
    // Put code here to be run every loop

    // Show the status of the conveyor and talons in SmartDashboard.
    if (m_conveyorDebug > 0) {
        double outputCV8 = 0.0, currentCV8 = 0.0;
    
        if (m_talonValidCV8) {
            outputCV8 = motorCV8->GetMotorOutputPercent();
            currentCV8 = motorCV8->GetOutputCurrent();
        }

        frc::SmartDashboard::PutNumber("CV_Output_CV8", outputCV8);
        frc::SmartDashboard::PutNumber("CV_Current_CV8", currentCV8);
        frc::SmartDashboard::PutNumber("CV_Photosensor", cVPhotosensor->Get());
        
    }

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.


void Conveyor::Initialize(void) {
	std::printf("2135: CV Init\n");
	// Motor off
	if (m_talonValidCV8)
		motorCV8->Set(ControlMode::PercentOutput, 0.0);
  
    // Default to a length of 60, start empty output
    // Length is expensive to set, so only set it once, then just update data
    // TODO: instantiate LED as m_led

}

void Conveyor::FaultDump(void) {
	
	//	Dump all Talon faults
	frc2135::TalonUtils::TalonFaultDump("CV 8", motorCV8);
}

// Set mode of conveyor
void Conveyor::SetConveyorMotorSpeed(int direction) {
	const char *strName;
	double outputCV = 0.0; 		// Default: off

	switch (direction)
	{
	default:
	case CONVEYOR_STOP:
		strName = "STOP";
		outputCV = 0.0;
		break;
	case CONVEYOR_UP:
		strName = "UP";
		outputCV = m_acquireSpeed;
		break;
	case CONVEYOR_HOLD:
		strName = "HOLD";
		outputCV = m_holdSpeed;
		break;
	case CONVEYOR_DOWN:
		strName = "DOWN";
		outputCV = m_expelSpeed;
		break;
	}

    std::printf("2135: Conveyor Set Speed - %s\n", strName);

	if (m_talonValidCV8)
		motorCV8->Set(ControlMode::PercentOutput, outputCV);

}
