// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include <Subsystems/Shooter.h>
#include <frc2135/TalonUtils.h>
#include <frc/smartdashboard/SmartDashboard.h>
#include <frc2135/RobotConfig.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Shooter::Shooter() : frc::Subsystem("Shooter") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
motorSH10.reset(new WPI_TalonSRX(10));


motorSH11.reset(new WPI_TalonSRX(11));


shooterIndexer.reset(new frc::Solenoid(0, 6));
AddChild("Shooter Indexer", shooterIndexer);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Validate Talon SRX controllers, initialize and display firmware versions
        m_talonValidSH10 = frc2135::TalonUtils::TalonCheck(motorSH10, "SH", "SH10"); 
        m_talonValidSH11 = frc2135::TalonUtils::TalonCheck(motorSH11, "SH", "SH11"); 


    // Check if solenoid is functional or blacklisted
    if (shooterIndexer->IsBlackListed())
        std::printf("2135: ERROR: SH Shooter Indexer FWD Solenoid is BLACKLISTED\n");
    else
        std::printf("2135: SH Shooter Indexer FWD Solenoid is FUNCTIONAL\n");

    // Initialize Variables
    frc2135::RobotConfig* config = frc2135::RobotConfig::GetInstance();
    config->GetValueAsDouble("SH_ForwardSpeed", m_forwardSpeed, 0.75);
    config->GetValueAsDouble("SH_ReverseSpeed", m_reverseSpeed, -0.25);

    // Set motor directions
    // Turn on Brake mode (not coast)
    // Initialize modes and set power to off
    // Set motor peak outputs - acquire is fastest speed
    if (m_talonValidSH10) {
        motorSH10->SetInverted(false);
        motorSH10->SetNeutralMode(NeutralMode::Brake);
        motorSH10->Set(ControlMode::PercentOutput, 0.0);
        motorSH10->ConfigPeakOutputForward(m_forwardSpeed, m_timeout);
        motorSH10->ConfigPeakOutputReverse(m_reverseSpeed, m_timeout);
    }
    if (m_talonValidSH11) {
        motorSH11->SetInverted(InvertType::FollowMaster);
        motorSH11->SetNeutralMode(NeutralMode::Brake);
        motorSH11->Set(ControlMode::Follower,10);
        motorSH11->ConfigPeakOutputForward(m_forwardSpeed, m_timeout);
        motorSH11->ConfigPeakOutputReverse(m_reverseSpeed, m_timeout);
    }
}

void Shooter::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Shooter::Periodic() {
    // Put code here to be run every loop

    // Show the status of the shooter and talons in SmartDashboard.
    if (m_shooterDebug > 0) {
        double outputSH10 = 0.0, currentSH10 = 0.0;
        double outputSH11 = 0.0, currentSH11 = 0.0;

        if (m_talonValidSH10) {
            outputSH10 = motorSH10->GetMotorOutputPercent();
            currentSH10 = motorSH10->GetOutputCurrent();
        }

        if (m_talonValidSH11) {
            outputSH11 = motorSH11->GetMotorOutputPercent();
            currentSH11 = motorSH11->GetOutputCurrent();
        }

        frc::SmartDashboard::PutNumber("SH_Output_SH10", outputSH10);
        frc::SmartDashboard::PutNumber("SH_Current_SH10", currentSH10);
        frc::SmartDashboard::PutNumber("SH_Output_SH11", outputSH11);
        frc::SmartDashboard::PutNumber("SH_Current_SH11", currentSH11);

        frc::SmartDashboard::PutNumber("SH_Indexer", shooterIndexer->Get());
    }
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Shooter::Initialize(void) {
	std::printf("2135: SH Init\n");
	// Motor off
	if (m_talonValidSH10)
		motorSH10->Set(ControlMode::PercentOutput, 0.0);
}

void Shooter::FaultDump(void) {
	
	//	Dump all Talon faults
	frc2135::TalonUtils::TalonFaultDump("SH 10", motorSH10);
    frc2135::TalonUtils::TalonFaultDump("SH 11", motorSH11);

}

// Set mode of shooter
void Shooter::SetShooterMotorSpeed(int direction) {
	const char *strName;
	double outputSH = 0.0; 		// Default: off

    switch (direction)
	{
	default:
	case SHOOTER_STOP:
		strName = "STOP";
		outputSH = 0.0;
        shooterIndexer->Set(false);
		break;
	case SHOOTER_FORWARD:
		strName = "FORWARD";
		outputSH = m_forwardSpeed;
        shooterIndexer->Set(true);
		break;
	case SHOOTER_REVERSE:
		strName = "REVERSE";
		outputSH = m_reverseSpeed;
        shooterIndexer->Set(true);
		break;
	}

    std::printf("2135: Shooter Set Speed - %s\n", strName);

	if (m_talonValidSH10)
		motorSH10->Set(ControlMode::PercentOutput, outputSH);
}
