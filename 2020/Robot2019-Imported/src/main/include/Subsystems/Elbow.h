// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef ELBOW_H
#define ELBOW_H
#include <frc/commands/Subsystem.h>
#include <frc/commands/Command.h>

#include <ctre/Phoenix.h>

#include "frc2135/TalonSRXUtils.h"
#include "frc2135/RobotConfig.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class Elbow: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<WPI_TalonSRX> motorEB10;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Declare constants
	int 			m_elbowDebug = 0; 				// Debug flag to disable extra logging calls
	const int 		m_slotIndex = 0;				// Motor controller profile slot index
	const int 		m_pidIndex = 0; 				// PID Slot index for sensors
	const int 		m_timeout = 30;					// CAN timeout in msec to wait for response
	const double	OUTPUT_SHAFT_REDUCTION = ((double)15/(double)12);	// Sprocket reduction on output shaft 16T to 22T sprockets
	const double 	COUNTS_PER_ROTATION = (1024 * 4); 	// CPR is 1024 and multipled by 4 because it is a quadrature encoder
   
    bool			m_talonValidEB10;				// Health indicator for elbow Talon 12

	bool			m_calibrated = false;			// Indicates whether the elevator has been calibrated
	int				m_elbowAngle;					// Current elbow level (not degrees)
	double			m_targetDegrees;				// Target angle of degrees that are requested of the elbow
	int				m_targetCounts;					// Target encoder counts of angle that are requested of the elbow
	double			m_curDegrees;					// Current elbow angle in degrees from vertical
	bool			m_isMoving = false;				// State of whether the elbow is moving or stationary
	bool			m_bumpDir;						// State variable for bumping up or down

	frc::Timer		m_safetyTimer;					// Safety timer for use in Elbow
	double			m_safetyTimeout;				// Seconds that the timer ran before stopping
	
	// Configuration file parameters
	double 			m_peakOut;						// Elbow maximum speed during movement
	int				m_velocity;						// Elbow motion velocity
	int				m_acceleration;					// Elbow motion acceleration
	int				m_sCurveStrength;				// Elbow motion S curve smoothing strength
	double			m_pidKf;						// Elbow PID force constant
	double			m_pidKp;						// Elbow PID proportional constant
	double			m_pidKi;						// Elbow PID integral constant
	double			m_pidKd;						// Elbow PID derivative constant
	double			m_arbFeedForward;				// Elbow Motion Magic Arbitrary Feed Forward		
	double			m_wristArbFF;					// Elbow  Motion Magic Arbitrary Feed Forward - wrist adjustment		
	double			m_neutralDeadband;				// Elbow PID neutral deadband in percent
	double			m_toleranceDegrees;				// Elbow PID tolerance in degrees
	int				m_elbowMinCounts;				// Elbow minimum allowable counts
	int				m_elbowMaxCounts;				// Elbow maximum allowable counts
	double			m_elbowMinAngle;				// Elbow minimum angle at upper hard stop
	double			m_elbowMaxAngle;				// Elbow maximum angle at lower hard stop
	double			m_calibAngle;					// Angle at which the robot is being calibrated (hard stop down)
	double			m_bumpAngle;					// Incremental angle when bumping the elbow up/down

	double			m_groundCargoAngle;				// Setpoint for floor level (tilted for cargo pickup)
	double			m_groundHatchAngle;				// Setpoint for floor level (full down for hatch pickup)
	double			m_loadingCargoAngle;			// Setpoint to acquire cargo from the loading station
	double			m_loadingHatchAngle;			// Setpoint to acquire hatch panels from the loading station
	double			m_shipCargoAngle;				// Setpoint to deliver cargo in cargo ship
	double			m_shipHatchAngle;				// Setpoint to deliver hatches to rocket at first level
	double			m_rocketL1CargoAngle;			// Setpoint for delivery of cargo to rocket at first level
	double 			m_rocketL1HatchAngle; 			// Setpoint for delivery of hatch to rocket at first level
	double 			m_rocketL2CargoAngle; 			// Setpoint for delivery of cargo to rocket at second level 
	double			m_rocketL2HatchAngle;			// Setpoint for delivery of hatch to rocket at second level
	double 			m_rocketL3CargoAngle;			// Setpoint for delivery of cargo to rocket at third level 
	double			m_rocketL3HatchAngle;			// Setpoint for delivery of hatch to rocket at third level
	double			m_stowedAngle;

public:
	Elbow();
	void InitDefaultCommand() override;
	void Periodic() override;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	enum {									// Elbow subsystem movement states
		NOCHANGE_ANGLE = -1,				// No change in elbow angle--maintain current position
		GROUND_ANGLE = 0,					// Move to ground angle
		SHIP_ANGLE = 1,						// Move to cargo ship angle
		ROCKET_L1_ANGLE = 2,				// Move to rocket level 1 angle		
		ROCKET_L2_ANGLE = 3, 				// Move to rocket level 2 angle
		ROCKET_L3_ANGLE = 4,				// Move to rocket level 3 angle
		SMARTDASH_ANGLE = 5,				// Move to an angle read from dashboard
		BUMP_ANGLE = 6,						// Move by bumping angle up or down
		STOW_ANGLE = 7,						// Move to a stowed position.
		LOADING_ANGLE = 8					// Move to loading station angle
	};

	void Initialize(void);
	void FaultDump(void);

	double DegreesToRadians(double degrees);
	int DegreesToCounts(double degrees);
	double CountsToDegrees(int counts);
	double GetCurrentDegrees(void);
	double GetCurrentArbFeedForward(void);

	void MoveToPositionInit(int angle);
	bool MoveToPositionIsFinished(void);
	void BumpToPosition(bool direction);

	void Calibrate();
};

#endif
