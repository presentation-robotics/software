// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "frc/smartdashboard/Smartdashboard.h"

#include "Subsystems/Prototype.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/DriveTeleop.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Prototype::Prototype() : frc::Subsystem("Prototype") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
talonSRX1.reset(new WPI_TalonSRX(21));


talonSRX2.reset(new WPI_TalonSRX(22));


limitSwitch1.reset(new frc::DigitalInput(0));
AddChild("Limit Switch 1", limitSwitch1);

limitSwitch2.reset(new frc::DigitalInput(1));
AddChild("Limit Switch 2", limitSwitch2);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    pigeonIMU1.reset(new PigeonIMU(talonSRX2.get()));

    m_talonInvert1 = false;
    m_talonInvert2 = false;
}

void Prototype::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new DriveTeleop());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Prototype::Periodic() {
    // Put code here to be run every loop
    double counts1 = talonSRX1->GetSelectedSensorPosition(0);
    double counts2 = talonSRX2->GetSelectedSensorPosition(0);

    frc::SmartDashboard::PutNumber("Motor1_Counts", counts1);
    frc::SmartDashboard::PutNumber("Motor2_Counts", counts2);

    frc::SmartDashboard::PutNumber("LimitSwitch1", limitSwitch1->Get());
    frc::SmartDashboard::PutNumber("LimitSwitch2", limitSwitch2->Get());

    frc::SmartDashboard::PutNumber("Motor1_Output", m_speed1);
    frc::SmartDashboard::PutNumber("Motor2_Output", m_speed2); 
}

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Prototype::MoveWithJoystick(std::shared_ptr<frc::Joystick> jstick) {
    m_speed1 = -jstick->GetY();
    m_speed2 = -jstick->GetX();
    talonSRX1->Set(ControlMode::PercentOutput, m_speed1);
    talonSRX2->Set(ControlMode::PercentOutput, m_speed2);  
}

void Prototype::InvertMotor1() {
    m_talonInvert1 = !m_talonInvert1;
    talonSRX1->SetInverted(m_talonInvert1);
    std::printf ("2135: Motor 1 %d\n", m_talonInvert1);
}

void Prototype::InvertMotor2() {
    m_talonInvert2 = !m_talonInvert2;
    talonSRX2->SetInverted(m_talonInvert2);
    std::printf ("2135: Motor 2 %d\n", m_talonInvert2);
}

void Prototype::ReadSensorVelocity() {
    std::printf("2135: Velocity: %d\n", talonSRX1->GetSelectedSensorVelocity()); 
}
