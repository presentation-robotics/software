// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import frc.robot.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
public JoystickButton dtShiftSpeed;
public JoystickButton dtPIDAlignTurn;
public JoystickButton dtAlignTurn;
public JoystickButton dtModeToggle;
public Joystick dStick;
public JoystickButton inDeploy;
public JoystickButton inStow;
public JoystickButton inExpel;
public JoystickButton inAquire;
public JoystickButton cvDown;
public JoystickButton cvUp;
public JoystickButton shRun;
public JoystickButton shFire;
public JoystickButton clDeploy;
public JoystickButton clStow;
public JoystickButton clAscend;
public JoystickButton clDescend;
public JoystickButton spColor;
public JoystickButton spRotation;
public Joystick controlBoard;
public JoystickButton ledToggle;
public JoystickButton dtRampUp;
public JoystickButton dtRampDown;
public Joystick controlBoard2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

controlBoard2 = new Joystick(2);

dtRampDown = new JoystickButton(controlBoard2, 4);
dtRampDown.whenPressed(new DriveBumpRamp(true));
dtRampUp = new JoystickButton(controlBoard2, 3);
dtRampUp.whenPressed(new DriveBumpRamp(false));
ledToggle = new JoystickButton(controlBoard2, 1);
ledToggle.whenPressed(new LedSet());
controlBoard = new Joystick(1);

spRotation = new JoystickButton(controlBoard, 14);
spRotation.whenPressed(new SpinRotation());
spColor = new JoystickButton(controlBoard, 13);
spColor.whenPressed(new SpinColor());
clDescend = new JoystickButton(controlBoard, 12);
clDescend.whileHeld(new ClimberRun(-1));
clAscend = new JoystickButton(controlBoard, 11);
clAscend.whileHeld(new ClimberRun(1));
clStow = new JoystickButton(controlBoard, 10);
clStow.whenPressed(new ClimberDeploy(false));
clDeploy = new JoystickButton(controlBoard, 9);
clDeploy.whenPressed(new ClimberDeploy(true));
shFire = new JoystickButton(controlBoard, 8);
shFire.whenPressed(new IndexerDeploy(false));
shRun = new JoystickButton(controlBoard, 7);
shRun.whileHeld(new ShooterRun(1));
cvUp = new JoystickButton(controlBoard, 6);
cvUp.whileHeld(new ConveyorRun(1));
cvDown = new JoystickButton(controlBoard, 5);
cvDown.whileHeld(new ConveyorRun(-1));
inAquire = new JoystickButton(controlBoard, 4);
inAquire.whileHeld(new IntakeRun(1));
inExpel = new JoystickButton(controlBoard, 3);
inExpel.whileHeld(new IntakeRun(-1));
inStow = new JoystickButton(controlBoard, 2);
inStow.whenPressed(new IntakeDeploy(false));
inDeploy = new JoystickButton(controlBoard, 1);
inDeploy.whenPressed(new IntakeDeploy(false));
dStick = new Joystick(0);

dtModeToggle = new JoystickButton(dStick, 3);
dtModeToggle.whenPressed(new DriveModeToggle());
dtAlignTurn = new JoystickButton(dStick, 4);
dtAlignTurn.whenPressed(new DriveAlignTurn());
dtPIDAlignTurn = new JoystickButton(dStick, 2);
dtPIDAlignTurn.whenPressed(new DriveAlignPIDTurn(0));
dtShiftSpeed = new JoystickButton(dStick, 1);
dtShiftSpeed.whileHeld(new DriveShift(false));


        // SmartDashboard Buttons
        SmartDashboard.putData("Auto Shoot: shoot", new AutoShoot(3));
        SmartDashboard.putData("Auto Shoot: wait", new AutoShoot(6));
        SmartDashboard.putData("Auto Convey: shoot", new AutoConvey(3));
        SmartDashboard.putData("Auto Drive Dist: DEFAULT", new AutoDriveDist(0));
        SmartDashboard.putData("Auto Drive Timed", new AutoDriveTimed());
        SmartDashboard.putData("Auto Shoot Drive", new AutoShootDrive());
        SmartDashboard.putData("Auto Shoot Stop", new AutoShootStop());
        SmartDashboard.putData("Drive Reset", new DriveReset());
        SmartDashboard.putData("Drive Align Turn", new DriveAlignTurn());
        SmartDashboard.putData("Drive Align PID Turn: default", new DriveAlignPIDTurn(0.0));
        SmartDashboard.putData("Drive Mode Toggle", new DriveModeToggle());
        SmartDashboard.putData("Drive Bump Ramp: BUMP_UP", new DriveBumpRamp(true));
        SmartDashboard.putData("Drive Bump Ramp: BUMP_DOWN", new DriveBumpRamp(false));
        SmartDashboard.putData("Intake Deploy: INTAKE_STOW", new IntakeDeploy(false));
        SmartDashboard.putData("Intake Deploy: INTAKE_DEPLOY", new IntakeDeploy(true));
        SmartDashboard.putData("Intake Run: INTAKE_STOP", new IntakeRun(0));
        SmartDashboard.putData("Intake Run: INTAKE_ACQUIRE", new IntakeRun(1));
        SmartDashboard.putData("Intake Run: INTAKE_EXPEL", new IntakeRun(-1));
        SmartDashboard.putData("Conveyor Run: CONVEYORDIRECTION_STOP", new ConveyorRun(0));
        SmartDashboard.putData("Conveyor Run: CONVEYORDIRECTION_UP", new ConveyorRun(1));
        SmartDashboard.putData("Conveyor Run: CONVEYORDIRECTION_DOWN", new ConveyorRun(-1));
        SmartDashboard.putData("Shooter Run: SHOOTERSPEED_REVERSE", new ShooterRun(-1));
        SmartDashboard.putData("Shooter Run: SHOOTERSPEED_STOP", new ShooterRun(0));
        SmartDashboard.putData("Shooter Run: SHOOTERSPEED_FORWARD", new ShooterRun(1));
        SmartDashboard.putData("Indexer Deploy: INDEXER_CLOSE", new IndexerDeploy(false));
        SmartDashboard.putData("Indexer Deploy: INDEXER_OPEN", new IndexerDeploy(true));
        SmartDashboard.putData("Climber Deploy: CLIMBER_STOW", new ClimberDeploy(false));
        SmartDashboard.putData("Climber Deploy: CLIMBER_DEPLOY", new ClimberDeploy(true));
        SmartDashboard.putData("Climber Run: CLIMBER_UP", new ClimberRun(1));
        SmartDashboard.putData("Climber Run: CLIMBER_DOWN", new ClimberRun(-1));
        SmartDashboard.putData("Climber Run: CLIMBER_STOP", new ClimberRun(0));
        SmartDashboard.putData("Spin Color", new SpinColor());
        SmartDashboard.putData("Spin Rotation", new SpinRotation());
        SmartDashboard.putData("Led Set", new LedSet());
        SmartDashboard.putData("RunTrajectory", new RunTrajectory());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public Joystick getDStick() {
        return dStick;
    }

public Joystick getControlBoard() {
        return controlBoard;
    }

public Joystick getControlBoard2() {
        return controlBoard2;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

