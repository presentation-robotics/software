// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/LED.h"
#include <frc/smartdashboard/SmartDashboard.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Led::Led() : frc::Subsystem("Led") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Led::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Led::Periodic() {
    // Put code here to be run every loop

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Led::LEDInit() {
    //Default to a length of 60, start empty output
    //Length is expensive to set, so only set it once, then just update data
    m_led.SetLength(kLength);
    m_led.SetData(m_ledBuffer);
    m_led.Start();


    // Add options for colors in SmartDashboard
	chooser.AddOption("LED_Black", LED_SetBlack);
    chooser.AddOption("LED_White", LED_SetWhite);
    chooser.AddOption("LED_Red", LED_SetRed);
    chooser.AddOption("LED_Orange", LED_SetOrange);
    chooser.AddOption("LED_Yellow", LED_SetYellow);
    chooser.AddOption("LED_Green", LED_SetGreen);
    chooser.AddOption("LED_Blue", LED_SetBlue);
    chooser.AddOption("LED_Purple", LED_SetPurple);

    frc::SmartDashboard::PutData("LED Color", &chooser);

}

// Take RGB value to change color of LED
void Led::LedSetRGB(int rgbRed, int rgbGreen, int rgbBlue) {
    for (int i = 0; i < kLength; i++) {
        m_ledBuffer[i].SetRGB(rgbRed, rgbGreen, rgbBlue);
    }

    m_led.SetData(m_ledBuffer);
}

// Set color of LED
void Led::SetColor (int color) {
    const char* strName;

    switch(color)
    {
    default:
    case LED_SetBlack:
        strName = "BLACK";
        LedSetRGB(0, 0, 0); //black
        break;
    case LED_SetWhite:
        strName = "WHITE";
        LedSetRGB(255, 255, 255); //white
        break;
    case LED_SetRed:
        strName = "RED";
        LedSetRGB(255, 0, 0); //red
        break;
    case LED_SetOrange:
        strName = "ORANGE";
        LedSetRGB(255, 80, 0); //orange
        break;
    case LED_SetYellow:
        strName = "YELLOW";
        LedSetRGB(255, 255, 0); //yellow
        break;
    case LED_SetGreen:
        strName = "GREEN";
        LedSetRGB(0, 255, 0); //green
        break;
    case LED_SetBlue:
        strName = "BLUE";
        LedSetRGB(0, 0, 255); //blue
        break;
    case LED_SetPurple: // For Rithu
        strName = "PURPLE";
        LedSetRGB(255, 0, 255); //purple
        break;
    }

    if (m_previousColor != color){
        printf("2135: LED Color Set to %s\n", strName);
        m_previousColor = color;
    }
}

// Turn on LED when certain conditions are met
void Led::DetectPowerCell(bool powerCellOn) {
    if (powerCellOn){
        SetColor(chooser.GetSelected());
    }
    else {
        SetColor(LED_SetBlack);
    }
}

void Led::DisplayColor(LED_Source source, bool enable){
    if (enable){
        m_sourceEnabled |= source;
    }
    else {
        m_sourceEnabled &= ~source;
    }
    if (m_sourceEnabled & LED_Source_Shooter){
        SetColor(m_shooterLEDColor);
    }
    else if (m_sourceEnabled & LED_Source_Conveyor){
        SetColor(m_conveyorLEDColor);
    }
    else if (m_sourceEnabled & LED_Source_Command){
        SetColor(chooser.GetSelected());
    }
    else {
        SetColor(LED_SetBlack);
    }

}
