// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#pragma once

#include <frc/commands/Subsystem.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "ctre/Phoenix.h"
#include "frc/Solenoid.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

/**
 *
 *
 * @author ExampleAuthor
 */
class Shooter: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
std::shared_ptr<WPI_TalonSRX> motorSH10;
std::shared_ptr<WPI_TalonSRX> motorSH11;
std::shared_ptr<frc::Solenoid> shooterIndexer;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Declare constants
	const int	m_timeout = 20;				// CAN timeout in msec to wait for response
	int			m_shooterDebug = 0;			// DEBUG flag to disable/enable extra logging calls		

	// Declare module variables	

	double		m_forwardSpeed;
	double 		m_reverseSpeed;

	bool		m_talonValidSH10;			// Health indicator for shooter talon 10
	bool		m_talonValidSH11;			// Health indicator for shooter talon 11

public:
Shooter();
	void InitDefaultCommand() override;
	void Periodic() override;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	//Shooter motor control states
		enum {
		SHOOTER_STOP = 0,
		SHOOTER_FORWARD = 1,
		SHOOTER_REVERSE = -1,
	};

	void Initialize(void);
	void SetShooterMotorSpeed(int direction);
	void FaultDump(void);

};

