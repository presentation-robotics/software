// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "ShooterWheels.h"
#include "../Robotmap.h"
#include "SmartDashboard/SmartDashboard.h"
#include "LiveWindow/LiveWindow.h"
#include "../Commands/ShooterStop.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
ShooterWheels::ShooterWheels() : PIDSubsystem("ShooterWheels", 1.0, 0.0, 0.0) {
	SetAbsoluteTolerance(0.2);
	GetPIDController()->SetContinuous(false);
	LiveWindow::GetInstance()->AddActuator("Shooter Wheels", "PIDSubsystem Controller", GetPIDController());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	entryMotor = RobotMap::shooterWheelsEntryMotor;
	exitMotor = RobotMap::shooterWheelsExitMotor;
	exitEncoder = RobotMap::shooterWheelsExitEncoder;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	// Use these to get going:
	// SetSetpoint() -  Sets where the PID controller should move the system
	//                  to
	// Enable() - Enables the PID controller.
}
double ShooterWheels::ReturnPIDInput() {
	// Return your input value for the PID loop
	// e.g. a sensor, like a potentiometer:
	// yourPot->SetAverageVoltage() / kYourMaxVoltage;	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return exitEncoder->PIDGet();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
}
void ShooterWheels::UsePIDOutput(double output) {
	// Use output to drive your system, like a motor
	// e.g. yourMotor->Set(output);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
	exitMotor->PIDWrite(output);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
}
void ShooterWheels::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//setDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new ShooterStop());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Set shooter entry and exit power levels
void ShooterWheels::SetPower( double entryPower, double exitPower ){
	
//	entryPower *= -1;			// Shooter entry motor is inverted
//	exitPower *= -1;			// Shooter exit motor is inverted
	
	entryMotor->Set ( entryPower, 0 );
	exitMotor->Set ( exitPower, 0 );
	
	RobotMap::driverStationLCD->PrintfLine( DriverStationLCD::kUser_Line4, "Shoot:  %5.2f %5.2f", entryPower, exitPower );
	RobotMap::driverStationLCD->PrintfLine( DriverStationLCD::kUser_Line5, "Speed:  %5.2f", exitEncoder );
	SmartDashboard::PutNumber( "Shooter Entry Power", entryPower );
	SmartDashboard::PutNumber( "Shooter Exit Power", exitPower );	
}
