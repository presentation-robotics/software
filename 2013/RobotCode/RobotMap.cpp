// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::chassisLeft = NULL;
SpeedController* RobotMap::chassisRight = NULL;
RobotDrive* RobotMap::chassisDriveTrain = NULL;
Encoder* RobotMap::chassisLeftEncoder = NULL;
Encoder* RobotMap::chassisRightEncoder = NULL;
DoubleSolenoid* RobotMap::chassisShifter = NULL;
SpeedController* RobotMap::sweeperSweepMotor = NULL;
SpeedController* RobotMap::sweeperConveyorMotor = NULL;
SpeedController* RobotMap::magazineMagazineMotor = NULL;
AnalogChannel* RobotMap::magazineMagazinePotentiometer = NULL;
AnalogChannel* RobotMap::magazineSlotLimit1 = NULL;
AnalogChannel* RobotMap::magazineSlotLimit2 = NULL;
AnalogChannel* RobotMap::magazineSlotLimit3 = NULL;
AnalogChannel* RobotMap::magazineSlotLimit4 = NULL;
Servo* RobotMap::aimingCameraServo = NULL;
SpeedController* RobotMap::aimingElevationMotor = NULL;
AnalogChannel* RobotMap::aimingElevationPotentiometer = NULL;
PIDController* RobotMap::aimingElevationPID = NULL;
Solenoid* RobotMap::shooterFiringPin = NULL;
SpeedController* RobotMap::shooterEntryShooterMotor = NULL;
Encoder* RobotMap::shooterEntryShooterEncoder = NULL;
PIDController* RobotMap::shooterEntryShooterPID = NULL;
SpeedController* RobotMap::shooterExitShooterMotor = NULL;
Encoder* RobotMap::shooterExitShooterEncoder = NULL;
PIDController* RobotMap::shooterExitShooterPID = NULL;
SpeedController* RobotMap::climberClimberMotor = NULL;
Compressor* RobotMap::pneumaticsAirCompressor = NULL;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();
	chassisLeft = new Talon(1, 1);
	lw->AddActuator("Chassis", "Left", (Talon*) chassisLeft);
	
	chassisRight = new Talon(1, 2);
	lw->AddActuator("Chassis", "Right", (Talon*) chassisRight);
	
	chassisDriveTrain = new RobotDrive(chassisLeft, chassisRight);
	
	chassisDriveTrain->SetSafetyEnabled(true);
        chassisDriveTrain->SetExpiration(0.1);
        chassisDriveTrain->SetSensitivity(0.5);
        chassisDriveTrain->SetMaxOutput(1.0);
        chassisDriveTrain->SetInvertedMotor(RobotDrive::kRearLeftMotor, true);        
	chassisLeftEncoder = new Encoder(1, 1, 1, 2, false, Encoder::k4X);
	lw->AddSensor("Chassis", "Left Encoder", chassisLeftEncoder);
	chassisLeftEncoder->SetDistancePerPulse(0.00277778);
        chassisLeftEncoder->SetPIDSourceParameter(Encoder::kDistance);
        chassisLeftEncoder->Start();
	chassisRightEncoder = new Encoder(1, 3, 1, 4, false, Encoder::k4X);
	lw->AddSensor("Chassis", "Right Encoder", chassisRightEncoder);
	chassisRightEncoder->SetDistancePerPulse(0.00277778);
        chassisRightEncoder->SetPIDSourceParameter(Encoder::kDistance);
        chassisRightEncoder->Start();
	chassisShifter = new DoubleSolenoid(1, 1, 2);      
	
	
	sweeperSweepMotor = new Talon(1, 3);
	lw->AddActuator("Sweeper", "Sweep Motor", (Talon*) sweeperSweepMotor);
	
	sweeperConveyorMotor = new Talon(1, 4);
	lw->AddActuator("Sweeper", "Conveyor Motor", (Talon*) sweeperConveyorMotor);
	
	magazineMagazineMotor = new Talon(1, 5);
	lw->AddActuator("Magazine", "Magazine Motor", (Talon*) magazineMagazineMotor);
	
	magazineMagazinePotentiometer = new AnalogChannel(1, 1);
	lw->AddSensor("Magazine", "Magazine Potentiometer", magazineMagazinePotentiometer);
	
	magazineSlotLimit1 = new AnalogChannel(1, 2);
	lw->AddSensor("Magazine", "Slot Limit 1", magazineSlotLimit1);
	
	magazineSlotLimit2 = new AnalogChannel(1, 3);
	lw->AddSensor("Magazine", "Slot Limit 2", magazineSlotLimit2);
	
	magazineSlotLimit3 = new AnalogChannel(1, 4);
	lw->AddSensor("Magazine", "Slot Limit 3", magazineSlotLimit3);
	
	magazineSlotLimit4 = new AnalogChannel(1, 5);
	lw->AddSensor("Magazine", "Slot Limit 4", magazineSlotLimit4);
	
	aimingCameraServo = new Servo(1, 10);
	lw->AddActuator("Aiming", "Camera Servo", aimingCameraServo);
	
	aimingElevationMotor = new Talon(1, 6);
	lw->AddActuator("Aiming", "Elevation Motor", (Talon*) aimingElevationMotor);
	
	aimingElevationPotentiometer = new AnalogChannel(1, 6);
	lw->AddSensor("Aiming", "Elevation Potentiometer", aimingElevationPotentiometer);
	
	aimingElevationPID = new PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ aimingElevationPotentiometer, aimingElevationMotor, 0.02);
	lw->AddActuator("Aiming", "Elevation PID", aimingElevationPID);
	aimingElevationPID->SetContinuous(false); aimingElevationPID->SetAbsoluteTolerance(0.2); 
        aimingElevationPID->SetOutputRange(-1.0, 1.0);
	shooterFiringPin = new Solenoid(1, 3);
	lw->AddActuator("Shooter", "Firing Pin", shooterFiringPin);
	
	shooterEntryShooterMotor = new Talon(1, 7);
	lw->AddActuator("Shooter", "Entry Shooter Motor", (Talon*) shooterEntryShooterMotor);
	
	shooterEntryShooterEncoder = new Encoder(1, 5, 1, 6, false, Encoder::k4X);
	lw->AddSensor("Shooter", "Entry Shooter Encoder", shooterEntryShooterEncoder);
	shooterEntryShooterEncoder->SetDistancePerPulse(0.00277778);
        shooterEntryShooterEncoder->SetPIDSourceParameter(Encoder::kRate);
        shooterEntryShooterEncoder->Start();
	shooterEntryShooterPID = new PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ shooterEntryShooterEncoder, shooterEntryShooterMotor, 0.02);
	lw->AddActuator("Shooter", "Entry Shooter PID", shooterEntryShooterPID);
	shooterEntryShooterPID->SetContinuous(false); shooterEntryShooterPID->SetAbsoluteTolerance(0.2); 
        shooterEntryShooterPID->SetOutputRange(-1.0, 1.0);
	shooterExitShooterMotor = new Talon(1, 8);
	lw->AddActuator("Shooter", "Exit Shooter Motor", (Talon*) shooterExitShooterMotor);
	
	shooterExitShooterEncoder = new Encoder(1, 7, 1, 8, false, Encoder::k4X);
	lw->AddSensor("Shooter", "Exit Shooter Encoder", shooterExitShooterEncoder);
	shooterExitShooterEncoder->SetDistancePerPulse(0.00277778);
        shooterExitShooterEncoder->SetPIDSourceParameter(Encoder::kRate);
        shooterExitShooterEncoder->Start();
	shooterExitShooterPID = new PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ shooterExitShooterEncoder, shooterExitShooterMotor, 0.02);
	lw->AddActuator("Shooter", "Exit Shooter PID", shooterExitShooterPID);
	shooterExitShooterPID->SetContinuous(false); shooterExitShooterPID->SetAbsoluteTolerance(0.2); 
        shooterExitShooterPID->SetOutputRange(-1.0, 1.0);
	climberClimberMotor = new Talon(1, 9);
	lw->AddActuator("Climber", "Climber Motor", (Talon*) climberClimberMotor);
	
	pneumaticsAirCompressor = new Compressor(1, 14, 1, 1);
	
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
