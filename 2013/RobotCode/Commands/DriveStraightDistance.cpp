// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.

#include "math.h"
#include "DriveStraightDistance.h"

DriveStraightDistance::DriveStraightDistance(double inches) {
	m_targetInches = inches;
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::chassis);
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void DriveStraightDistance::Initialize() {
	printf( "2135: DriveStraightDistance - %d inches\n", m_targetInches );
	m_currentLeftInches = RobotMap::chassisLeftEncoder->GetDistance();
	m_currentRightInches = RobotMap::chassisRightEncoder->GetDistance();
}

// Called repeatedly when this Command is scheduled to run
void DriveStraightDistance::Execute() {
	double leftEncoder;
	double rightEncoder;
	double leftMotorPower;
	double rightMotorPower;
	
	leftEncoder = RobotMap::chassisLeftEncoder->GetDistance() 
			- m_currentLeftInches;
	rightEncoder = RobotMap::chassisRightEncoder->GetDistance() 
			- m_currentRightInches;
	if (leftEncoder > 18)
		leftMotorPower = 0.6;
	else 
		leftMotorPower = 0.3;
	if (rightEncoder > 18)
		rightMotorPower = 0.6;
	else
		rightMotorPower = 0.3;
	Robot::chassis->DriveUsingTankControls(leftMotorPower, rightMotorPower);
}

// Make this return true when this Command no longer needs to run execute()
bool DriveStraightDistance::IsFinished() {
	bool atTarget;
	double leftEncoder;
	double rightEncoder;
	
	leftEncoder = RobotMap::chassisLeftEncoder->GetDistance() 
			- m_currentLeftInches;
	rightEncoder = RobotMap::chassisRightEncoder->GetDistance() 
			- m_currentRightInches;
	atTarget = (fabs(leftEncoder - m_targetInches) < 2.0) 
			&& (fabs(rightEncoder - m_targetInches) < 2.0);
	
	return atTarget;
}

// Called once after isFinished returns true
void DriveStraightDistance::End() {
	
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveStraightDistance::Interrupted() {

}
