// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "DriveTeleop.h"
DriveTeleop::DriveTeleop() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::chassis);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void DriveTeleop::Initialize() {
	printf( "2135: Drive Teleop\n" );
	SmartDashboard::PutNumber("Left Setpoint", RobotMap::chassisPIDLeftDrive->GetSetpoint());
	SmartDashboard::PutNumber("Right Setpoint", RobotMap::chassisPIDRightDrive->GetSetpoint());
	SmartDashboard::PutNumber("Main Setpoint", 0);
	SmartDashboard::PutNumber("Left P", RobotMap::chassisPIDLeftDrive->GetP());
	SmartDashboard::PutNumber("Right P", RobotMap::chassisPIDRightDrive->GetP());
	SmartDashboard::PutNumber("Left Minimum", RobotMap::chassisPIDLeftDrive->Get());
	RobotMap::chassisPIDLeftDrive->Enable();
	RobotMap::chassisPIDRightDrive->Enable();
}
// Called repeatedly when this Command is scheduled to run
void DriveTeleop::Execute() {
//	double leftSetpoint;
//	double rightSetpoint;
	double mainSetpoint;
	double leftP;
	double rightP;
	
//	leftSetpoint = SmartDashboard::GetNumber("Left Setpoint");
//	rightSetpoint = SmartDashboard::GetNumber("Right Setpoint");
	mainSetpoint = SmartDashboard::GetNumber("Main Setpoint");
	
	RobotMap::chassisPIDLeftDrive->SetSetpoint(mainSetpoint);
	RobotMap::chassisPIDRightDrive->SetSetpoint(-mainSetpoint);
	
	SmartDashboard::PutNumber("Left Setpoint", RobotMap::chassisPIDLeftDrive->GetSetpoint());
	SmartDashboard::PutNumber("Right Setpoint", RobotMap::chassisPIDRightDrive->GetSetpoint());
	
	leftP = SmartDashboard::GetNumber("Left P");
	rightP = SmartDashboard::GetNumber("Right P");
		
//		RobotMap::chassisPIDLeftDrive->SetSetpoint(leftP);
//		RobotMap::chassisPIDRightDrive->SetSetpoint(rightP);
}
// Make this return true when this Command no longer needs to run execute()
bool DriveTeleop::IsFinished() {
	return false;
}
// Called once after isFinished returns true
void DriveTeleop::End() {
	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveTeleop::Interrupted() {
}
