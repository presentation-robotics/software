// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::chassisLeftDriveMotor = NULL;
Encoder* RobotMap::chassisLeftDriveEncoder = NULL;
PIDController* RobotMap::chassisLeftDrivePID = NULL;
SpeedController* RobotMap::chassisRightDriveMotor = NULL;
Encoder* RobotMap::chassisRightDriveEncoder = NULL;
PIDController* RobotMap::chassisRightDrivePID = NULL;
DoubleSolenoid* RobotMap::transmissionShifterSolenoid = NULL;
SpeedController* RobotMap::sweeperSweeperMotor = NULL;
DoubleSolenoid* RobotMap::sweeperDeployCylinder = NULL;
Compressor* RobotMap::pneumaticsAirCompressor = NULL;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
DriverStation* RobotMap::driverStation = NULL;
RobotDrive* RobotMap::driveTrain = NULL;
void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();
	chassisLeftDriveMotor = new Talon(1, 1);
	lw->AddActuator("Chassis", "Left Drive Motor", (Talon*) chassisLeftDriveMotor);
	
	chassisLeftDriveEncoder = new Encoder(1, 1, 1, 2, false, Encoder::k4X);
	lw->AddSensor("Chassis", "Left Drive  Encoder", chassisLeftDriveEncoder);
	chassisLeftDriveEncoder->SetDistancePerPulse(1.0);
        chassisLeftDriveEncoder->SetPIDSourceParameter(Encoder::kDistance);
        chassisLeftDriveEncoder->Start();
	chassisLeftDrivePID = new PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ chassisLeftDriveEncoder, chassisLeftDriveMotor, 0.02);
	lw->AddActuator("Chassis", "Left Drive PID", chassisLeftDrivePID);
	chassisLeftDrivePID->SetContinuous(false); chassisLeftDrivePID->SetAbsoluteTolerance(0.2); 
        chassisLeftDrivePID->SetOutputRange(-1.0, 1.0);
	chassisRightDriveMotor = new Talon(1, 2);
	lw->AddActuator("Chassis", "Right Drive Motor", (Talon*) chassisRightDriveMotor);
	
	chassisRightDriveEncoder = new Encoder(1, 3, 1, 4, false, Encoder::k4X);
	lw->AddSensor("Chassis", "Right Drive Encoder", chassisRightDriveEncoder);
	chassisRightDriveEncoder->SetDistancePerPulse(1.0);
        chassisRightDriveEncoder->SetPIDSourceParameter(Encoder::kDistance);
        chassisRightDriveEncoder->Start();
	chassisRightDrivePID = new PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ chassisRightDriveEncoder, chassisRightDriveMotor, 0.02);
	lw->AddActuator("Chassis", "Right Drive PID", chassisRightDrivePID);
	chassisRightDrivePID->SetContinuous(false); chassisRightDrivePID->SetAbsoluteTolerance(0.2); 
        chassisRightDrivePID->SetOutputRange(-1.0, 1.0);
	transmissionShifterSolenoid = new DoubleSolenoid(1, 3, 4);      
	
	
	sweeperSweeperMotor = new Talon(1, 3);
	lw->AddActuator("Sweeper", "Sweeper Motor", (Talon*) sweeperSweeperMotor);
	
	sweeperDeployCylinder = new DoubleSolenoid(1, 1, 2);      
	
	
	pneumaticsAirCompressor = new Compressor(1, 5, 1, 1);
	
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	printf("2135: RobotMap Init\n");
	driverStation = DriverStation::GetInstance();
	driveTrain = new RobotDrive(chassisLeftDriveMotor, chassisRightDriveMotor);
}
