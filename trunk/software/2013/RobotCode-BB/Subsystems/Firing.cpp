// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Firing.h"
#include "../Robotmap.h"
#include "../Commands/FiringOff.h"
Firing::Firing() : Subsystem("Firing") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	spike1 = RobotMap::firingSpike1;
	spike2 = RobotMap::firingSpike2;
	spike3 = RobotMap::firingSpike3;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void Firing::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new FiringOff());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
// Enable the firing pin pneumatic
void Firing::EnableFiringValve(int valve){
	switch ( valve ) {
	case 1:
		spike1->Set( spike1->kForward );
		break;
	case 2:
		spike2->Set( spike2->kForward );
		break;
	case 3:
		spike3->Set( spike3->kForward );
		break;
	default:
		break;
	}
}
//
// Disable the firing pin pneumatic
void Firing::DisableFiringValve(int valve){
	switch ( valve ) {
	case 1:
		spike1->Set( spike1->kOff );
		break;
	case 2:
		spike2->Set( spike2->kOff );
		break;
	case 3:
		spike3->Set( spike3->kOff );
		break;
	default:
		break;
	}
}
