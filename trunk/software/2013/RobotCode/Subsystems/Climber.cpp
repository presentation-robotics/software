// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Climber.h"
#include "../Robotmap.h"
#include "../Commands/ClimberRetract.h"
Climber::Climber() : Subsystem("Climber") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	climberSolenoid = RobotMap::climberClimberSolenoid;
	leftLimit = RobotMap::climberLeftLimit;
	rightLimit = RobotMap::climberRightLimit;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void Climber::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new ClimberRetract());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
//
// Extend the climber pneumatic
void Climber::ClimberUp(){
	climberSolenoid->Set( climberSolenoid->kForward );
	RobotMap::driverStationLCD->Printf( DriverStationLCD::kUser_Line5, 0, "Climb extend" );
}
//
// Retract the climber pneumatic
void Climber::ClimberDown(){
	climberSolenoid->Set( climberSolenoid->kReverse );
	RobotMap::driverStationLCD->Printf( DriverStationLCD::kUser_Line5, 0, "Climb retract" );
}
// Return the left limit switch
bool Climber::GetLeftLimit(){
	RobotMap::driverStationLCD->Printf( DriverStationLCD::kUser_Line5, 10, "%4.1f",
			leftLimit->GetVoltage() );
	
	if ( leftLimit->GetVoltage() > 2.5 )
		return true;
	else
		return false;
}
// Return the right limit switch
bool Climber::GetRightLimit(){
	RobotMap::driverStationLCD->Printf( DriverStationLCD::kUser_Line5, 15, "%4.1f",
			rightLimit->GetVoltage() );
	
	if ( rightLimit->GetVoltage() > 2.5 )
		return true;
	else
		return false;
}
