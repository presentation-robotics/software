// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export tosub
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::chassisLeft = NULL;
SpeedController* RobotMap::chassisRight = NULL;
RobotDrive* RobotMap::chassisDriveTrain = NULL;
Encoder* RobotMap::chassisLeftEncoder = NULL;
Encoder* RobotMap::chassisRightEncoder = NULL;
DoubleSolenoid* RobotMap::transmissionShifter = NULL;
DoubleSolenoid* RobotMap::aimingElevation = NULL;
SpeedController* RobotMap::shooterEntryShooterMotor = NULL;
SpeedController* RobotMap::shooterExitShooterMotor = NULL;
Encoder* RobotMap::shooterExitShooterEncoder = NULL;
DoubleSolenoid* RobotMap::firingFiringPin = NULL;
DoubleSolenoid* RobotMap::climberClimberSolenoid = NULL;
Compressor* RobotMap::pneumaticsAirCompressor = NULL;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
DriverStation* RobotMap::driverStation = NULL;
void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();
	chassisLeft = new Talon(1, 1);
	lw->AddActuator("Chassis", "Left", (Talon*) chassisLeft);
	
	chassisRight = new Talon(1, 2);
	lw->AddActuator("Chassis", "Right", (Talon*) chassisRight);
	
	chassisDriveTrain = new RobotDrive(chassisLeft, chassisRight);
	
	chassisDriveTrain->SetSafetyEnabled(true);
        chassisDriveTrain->SetExpiration(0.25);
        chassisDriveTrain->SetSensitivity(0.5);
        chassisDriveTrain->SetMaxOutput(1.0);
        chassisDriveTrain->SetInvertedMotor(RobotDrive::kRearLeftMotor, true);
        chassisDriveTrain->SetInvertedMotor(RobotDrive::kRearRightMotor, true);        
	chassisLeftEncoder = new Encoder(1, 1, 1, 2, false, Encoder::k4X);
	lw->AddSensor("Chassis", "Left Encoder", chassisLeftEncoder);
	chassisLeftEncoder->SetDistancePerPulse(0.03665191429188092);
        chassisLeftEncoder->SetPIDSourceParameter(Encoder::kDistance);
        chassisLeftEncoder->Start();
	chassisRightEncoder = new Encoder(1, 3, 1, 4, true, Encoder::k4X);
	lw->AddSensor("Chassis", "Right Encoder", chassisRightEncoder);
	chassisRightEncoder->SetDistancePerPulse(0.03665191429188092);
        chassisRightEncoder->SetPIDSourceParameter(Encoder::kDistance);
        chassisRightEncoder->Start();
	transmissionShifter = new DoubleSolenoid(1, 1, 2);      
	
	
	aimingElevation = new DoubleSolenoid(1, 5, 6);      
	
	
	shooterEntryShooterMotor = new Talon(1, 7);
	lw->AddActuator("Shooter", "Entry Shooter Motor", (Talon*) shooterEntryShooterMotor);
	
	shooterExitShooterMotor = new Talon(1, 8);
	lw->AddActuator("Shooter", "Exit Shooter Motor", (Talon*) shooterExitShooterMotor);
	
	shooterExitShooterEncoder = new Encoder(1, 7, 1, 8, false, Encoder::k4X);
	lw->AddSensor("Shooter", "Exit Shooter Encoder", shooterExitShooterEncoder);
	shooterExitShooterEncoder->SetDistancePerPulse(0.1666666666668);
        shooterExitShooterEncoder->SetPIDSourceParameter(Encoder::kRate);
        shooterExitShooterEncoder->Start();
	firingFiringPin = new DoubleSolenoid(1, 3, 4);      
	
	
	climberClimberSolenoid = new DoubleSolenoid(1, 7, 8);      
	
	
	pneumaticsAirCompressor = new Compressor(1, 14, 1, 1);
	
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	
	driverStation = DriverStation::GetInstance();
}
