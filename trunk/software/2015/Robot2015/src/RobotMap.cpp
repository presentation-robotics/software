// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
Encoder* RobotMap::chassisEncoderL = NULL;
CANTalon* RobotMap::chassisMotorL2 = NULL;
PIDController* RobotMap::chassisLeftPID = NULL;
CANTalon* RobotMap::chassisMotorL3 = NULL;
Encoder* RobotMap::chassisEncoderR = NULL;
CANTalon* RobotMap::chassisMotorR4 = NULL;
PIDController* RobotMap::chassisRightPID = NULL;
CANTalon* RobotMap::chassisMotorR5 = NULL;
SpeedController* RobotMap::chassisMotorHL = NULL;
SpeedController* RobotMap::chassisMotorHR = NULL;
Solenoid* RobotMap::chassisEngage = NULL;
SpeedController* RobotMap::intakeConveyorL = NULL;
SpeedController* RobotMap::intakeConveyorR = NULL;
DigitalInput* RobotMap::intakeToteFullIn = NULL;
Solenoid* RobotMap::gripperClamp = NULL;
CANTalon* RobotMap::elevatorMotor6 = NULL;
CANTalon* RobotMap::elevatorMotor7 = NULL;
AnalogPotentiometer* RobotMap::elevatorHeightPot = NULL;
DigitalInput* RobotMap::elevatorUpperLimit = NULL;
DigitalInput* RobotMap::elevatorLowerLimit = NULL;
Compressor* RobotMap::pneumaticsCompressor = NULL;
AnalogInput* RobotMap::pneumaticsAnalogInput1 = NULL;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
	printf("2135: RobotMap init\n");

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	chassisEncoderL = new Encoder(0, 1, true, Encoder::k4X);
	lw->AddSensor("Chassis", "Encoder L", chassisEncoderL);
	chassisEncoderL->SetDistancePerPulse(1.0);
        chassisEncoderL->SetPIDSourceParameter(Encoder::kDistance);
	chassisMotorL2 = new CANTalon(2);
	
	
	chassisLeftPID = new PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ chassisEncoderL, chassisMotorL2, 0.02);
	lw->AddActuator("Chassis", "Left PID", chassisLeftPID);
	chassisLeftPID->SetContinuous(false); chassisLeftPID->SetAbsoluteTolerance(0.2); 
        chassisLeftPID->SetOutputRange(-1.0, 1.0);
	chassisMotorL3 = new CANTalon(3);
	
	
	chassisEncoderR = new Encoder(2, 3, false, Encoder::k4X);
	lw->AddSensor("Chassis", "Encoder R", chassisEncoderR);
	chassisEncoderR->SetDistancePerPulse(1.0);
        chassisEncoderR->SetPIDSourceParameter(Encoder::kDistance);
	chassisMotorR4 = new CANTalon(4);
	
	
	chassisRightPID = new PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ chassisEncoderR, chassisMotorR4, 0.02);
	lw->AddActuator("Chassis", "Right PID", chassisRightPID);
	chassisRightPID->SetContinuous(false); chassisRightPID->SetAbsoluteTolerance(0.2); 
        chassisRightPID->SetOutputRange(-1.0, 1.0);
	chassisMotorR5 = new CANTalon(5);
	
	
	chassisMotorHL = new Talon(4);
	lw->AddActuator("Chassis", "Motor HL", (Talon*) chassisMotorHL);
	
	chassisMotorHR = new Talon(1);
	lw->AddActuator("Chassis", "Motor HR", (Talon*) chassisMotorHR);
	
	chassisEngage = new Solenoid(0, 1);
	lw->AddActuator("Chassis", "Engage", chassisEngage);
	
	intakeConveyorL = new Talon(2);
	lw->AddActuator("Intake", "Conveyor L", (Talon*) intakeConveyorL);
	
	intakeConveyorR = new Talon(3);
	lw->AddActuator("Intake", "Conveyor R", (Talon*) intakeConveyorR);
	
	intakeToteFullIn = new DigitalInput(6);
	lw->AddSensor("Intake", "Tote Full In", intakeToteFullIn);
	
	gripperClamp = new Solenoid(0, 0);
	lw->AddActuator("Gripper", "Clamp", gripperClamp);
	
	elevatorMotor6 = new CANTalon(6);
	
	
	elevatorMotor7 = new CANTalon(7);
	
	
	elevatorHeightPot = new AnalogPotentiometer(0, 1.0, 0.0);
	lw->AddSensor("Elevator", "Height Pot", elevatorHeightPot);
	
	elevatorUpperLimit = new DigitalInput(9);
	lw->AddSensor("Elevator", "Upper Limit", elevatorUpperLimit);
	
	elevatorLowerLimit = new DigitalInput(8);
	lw->AddSensor("Elevator", "Lower Limit", elevatorLowerLimit);
	
	pneumaticsCompressor = new Compressor(0);
	
	
	pneumaticsAnalogInput1 = new AnalogInput(1);
	lw->AddSensor("Pneumatics", "Analog Input 1", pneumaticsAnalogInput1);
	


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

}
